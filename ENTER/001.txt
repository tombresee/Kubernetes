


=== LOOKING AROUND WITH KUBECTL A DOCKER DESKTOP KUBERNETES IMPLEMENTATION ===



(base) PS C:\Windows\system32> kubectl

kubectl controls the Kubernetes cluster manager.

 Find more information at: https://kubernetes.io/docs/reference/kubectl/overview/

Basic Commands (Beginner):
  create          Create a resource from a file or from stdin
  expose          Take a replication controller, service, deployment or pod and expose it as a new
Kubernetes service
  run             Run a particular image on the cluster
  set             Set specific features on objects


Basic Commands (Intermediate):
  explain         Get documentation for a resource
  get             Display one or many resources
  edit            Edit a resource on the server
  delete          Delete resources by file names, stdin, resources and names, or by resources and
label selector


Deploy Commands:
  rollout         Manage the rollout of a resource
  scale           Set a new size for a deployment, replica set, or replication controller
  autoscale       Auto-scale a deployment, replica set, stateful set, or replication controller


Cluster Management Commands:
  certificate     Modify certificate resources.
  cluster-info    Display cluster information
  top             Display resource (CPU/memory) usage
  cordon          Mark node as unschedulable
  uncordon        Mark node as schedulable
  drain           Drain node in preparation for maintenance
  taint           Update the taints on one or more nodes


Troubleshooting and Debugging Commands:
  describe        Show details of a specific resource or group of resources
  logs            Print the logs for a container in a pod
  attach          Attach to a running container
  exec            Execute a command in a container
  port-forward    Forward one or more local ports to a pod
  proxy           Run a proxy to the Kubernetes API server
  cp              Copy files and directories to and from containers
  auth            Inspect authorization
  debug           Create debugging sessions for troubleshooting workloads and nodes


Advanced Commands:
  diff            Diff the live version against a would-be applied version
  apply           Apply a configuration to a resource by file name or stdin
  patch           Update fields of a resource
  replace         Replace a resource by file name or stdin
  wait            Experimental: Wait for a specific condition on one or many resources
  kustomize       Build a kustomization target from a directory or URL.



Settings Commands:
  label           Update the labels on a resource
  annotate        Update the annotations on a resource
  completion      Output shell completion code for the specified shell (bash, zsh or fish)


Other Commands:
  alpha           Commands for features in alpha
  api-resources   Print the supported API resources on the server
  api-versions    Print the supported API versions on the server, in the form of "group/version"
  config          Modify kubeconfig files
  plugin          Provides utilities for interacting with plugins
  version         Print the client and server version information


Usage:
  kubectl [flags] [options]


Use "kubectl <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all commands).







(base) PS C:\Windows\system32> kubectl get -h

Display one or many resources.

 Prints a table of the most important information about the specified resources. You can filter the
list using a label selector and the --selector flag. If the desired resource type is namespaced you
will only see results in your current namespace unless you pass --all-namespaces.

 By specifying the output as 'template' and providing a Go template as the value of the --template
flag, you can filter the attributes of the fetched resources.

Use "kubectl api-resources" for a complete list of supported resources.

Examples:

  # List all pods in ps output format
  kubectl get pods

  # List all pods in ps output format with more information (such as node name)
  kubectl get pods -o wide

  # List a single replication controller with specified NAME in ps output format
  kubectl get replicationcontroller web

  # List deployments in JSON output format, in the "v1" version of the "apps" API group
  kubectl get deployments.v1.apps -o json

  # List a single pod in JSON output format
  kubectl get -o json pod web-pod-13je7

  # List a pod identified by type and name specified in "pod.yaml" in JSON output format
  kubectl get -f pod.yaml -o json

  # List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml
  kubectl get -k dir/

  # Return only the phase value of the specified pod
  kubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}

  # List resource information in custom columns
  kubectl get pod test-pod -o
custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image

  # List all replication controllers and services together in ps output format
  kubectl get rc,services

  # List one or more resources by their type and names
  kubectl get rc/web service/frontend pods/web-pod-13je7

  # List status subresource for a single pod.
  kubectl get pod web-pod-13je7 --subresource status


Options:
    -A, --all-namespaces=false:
        If present, list the requested object(s) across all namespaces. Namespace in current
        context is ignored even if specified with --namespace.

    --allow-missing-template-keys=true:
        If true, ignore any errors in templates when a field or map key is missing in the
        template. Only applies to golang and jsonpath output formats.

    --chunk-size=500:
        Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta
        and may change in the future.

    --field-selector='':
        Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector
        key1=value1,key2=value2). The server only supports a limited number of field queries per
        type.

    -f, --filename=[]:
        Filename, directory, or URL to files identifying the resource to get from a server.

    --ignore-not-found=false:
        If the requested object does not exist the command will return exit code 0.

    -k, --kustomize='':
        Process the kustomization directory. This flag can't be used together with -f or -R.

    -L, --label-columns=[]:
        Accepts a comma separated list of labels that are going to be presented as columns. Names
        are case-sensitive. You can also use multiple flag options like -L label1 -L label2...

    --no-headers=false:
        When using the default or custom-column output format, don't print headers (default print
        headers).

    -o, --output='':
        Output format. One of: (json, yaml, name, go-template, go-template-file, template,
        templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns,
        custom-columns-file, wide). See custom columns
        [https://kubernetes.io/docs/reference/kubectl/overview/#custom-columns], golang template
        [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template
        [https://kubernetes.io/docs/reference/kubectl/jsonpath/].

    --output-watch-events=false:
        Output watch event objects when --watch or --watch-only is used. Existing objects are
        output as initial ADDED events.

    --raw='':
        Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.

    -R, --recursive=false:
        Process the directory used in -f, --filename recursively. Useful when you want to manage
        related manifests organized within the same directory.

    -l, --selector='':
        Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l
        key1=value1,key2=value2). Matching objects must satisfy all of the specified label
        constraints.

    --server-print=true:
        If true, have the server return the appropriate table output. Supports extension APIs and
        CRDs.

    --show-kind=false:
        If present, list the resource type for the requested object(s).

    --show-labels=false:
        When printing, show all labels as the last column (default hide labels column)

    --show-managed-fields=false:
        If true, keep the managedFields when printing objects in JSON or YAML format.

    --sort-by='':
        If non-empty, sort list types using this field specification.  The field specification is
        expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API
        resource specified by this JSONPath expression must be an integer or a string.

    --subresource='':
        If specified, gets the subresource of the requested object. Must be one of [status scale].
        This flag is alpha and may change in the future.

    --template='':
        Template string or path to template file to use when -o=go-template, -o=go-template-file.
        The template format is golang templates
        [http://golang.org/pkg/text/template/#pkg-overview].

    -w, --watch=false:
        After listing/getting the requested object, watch for changes.

    --watch-only=false:
        Watch for changes to the requested object(s), without listing/getting first.


Usage:
  kubectl get
[(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide]
(TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags] [options]


Use "kubectl options" for a list of global command-line options (applies to all commands).










(base) PS C:\Windows\system32> kubectl api-resources

NAME                              SHORTNAMES   APIVERSION                             NAMESPACED   KIND

bindings                                       v1                                     true         Binding

componentstatuses                 cs           v1                                     false        ComponentStatus

configmaps                        cm           v1                                     true         ConfigMap

endpoints                         ep           v1                                     true         Endpoints

events                            ev           v1                                     true         Event

limitranges                       limits       v1                                     true         LimitRange

namespaces                        ns           v1                                     false        Namespace

nodes                             no           v1                                     false        Node

persistentvolumeclaims            pvc          v1                                     true         PersistentVolumeClaim

persistentvolumes                 pv           v1                                     false        PersistentVolume

pods                              po           v1                                     true         Pod

podtemplates                                   v1                                     true         PodTemplate

replicationcontrollers            rc           v1                                     true         ReplicationController

resourcequotas                    quota        v1                                     true         ResourceQuota

secrets                                        v1                                     true         Secret

serviceaccounts                   sa           v1                                     true         ServiceAccount

services                          svc          v1                                     true         Service

mutatingwebhookconfigurations                  admissionregistration.k8s.io/v1        false        MutatingWebhookConfiguration

validatingwebhookconfigurations                admissionregistration.k8s.io/v1        false        ValidatingWebhookConfiguration

customresourcedefinitions         crd,crds     apiextensions.k8s.io/v1                false        CustomResourceDefinition

apiservices                                    apiregistration.k8s.io/v1              false        APIService

controllerrevisions                            apps/v1                                true         ControllerRevision

daemonsets                        ds           apps/v1                                true         DaemonSet

deployments                       deploy       apps/v1                                true         Deployment

replicasets                       rs           apps/v1                                true         ReplicaSet

statefulsets                      sts          apps/v1                                true         StatefulSet

tokenreviews                                   authentication.k8s.io/v1               false        TokenReview

localsubjectaccessreviews                      authorization.k8s.io/v1                true         LocalSubjectAccessReview

selfsubjectaccessreviews                       authorization.k8s.io/v1                false        SelfSubjectAccessReview

selfsubjectrulesreviews                        authorization.k8s.io/v1                false        SelfSubjectRulesReview

subjectaccessreviews                           authorization.k8s.io/v1                false        SubjectAccessReview

horizontalpodautoscalers          hpa          autoscaling/v2                         true         HorizontalPodAutoscaler

cronjobs                          cj           batch/v1                               true         CronJob

jobs                                           batch/v1                               true         Job

certificatesigningrequests        csr          certificates.k8s.io/v1                 false        CertificateSigningRequest

leases                                         coordination.k8s.io/v1                 true         Lease

endpointslices                                 discovery.k8s.io/v1                    true         EndpointSlice

events                            ev           events.k8s.io/v1                       true         Event

flowschemas                                    flowcontrol.apiserver.k8s.io/v1beta2   false        FlowSchema

prioritylevelconfigurations                    flowcontrol.apiserver.k8s.io/v1beta2   false        PriorityLevelConfiguration

ingressclasses                                 networking.k8s.io/v1                   false        IngressClass

ingresses                         ing          networking.k8s.io/v1                   true         Ingress

networkpolicies                   netpol       networking.k8s.io/v1                   true         NetworkPolicy

runtimeclasses                                 node.k8s.io/v1                         false        RuntimeClass

poddisruptionbudgets              pdb          policy/v1                              true         PodDisruptionBudget

podsecuritypolicies               psp          policy/v1beta1                         false        PodSecurityPolicy

clusterrolebindings                            rbac.authorization.k8s.io/v1           false        ClusterRoleBinding

clusterroles                                   rbac.authorization.k8s.io/v1           false        ClusterRole

rolebindings                                   rbac.authorization.k8s.io/v1           true         RoleBinding

roles                                          rbac.authorization.k8s.io/v1           true         Role

priorityclasses                   pc           scheduling.k8s.io/v1                   false        PriorityClass

csidrivers                                     storage.k8s.io/v1                      false        CSIDriver

csinodes                                       storage.k8s.io/v1                      false        CSINode

csistoragecapacities                           storage.k8s.io/v1                      true         CSIStorageCapacity

storageclasses                    sc           storage.k8s.io/v1                      false        StorageClass

volumeattachments                              storage.k8s.io/v1                      false        VolumeAttachment














(base) PS C:\Windows\system32> kubectl options

The following options can be passed to any command:

    --add-dir-header=false:
        If true, adds the file directory to the header of the log messages (DEPRECATED: will be
        removed in a future release, see
        https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)

    --alsologtostderr=false:
        log to standard error as well as files (DEPRECATED: will be removed in a future release,
        see
        https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)

    --as='':
        Username to impersonate for the operation. User could be a regular user or a service
        account in a namespace.

    --as-group=[]:
        Group to impersonate for the operation, this flag can be repeated to specify multiple
        groups.

    --as-uid='':
        UID to impersonate for the operation.

    --cache-dir='C:\Users\tbresee\.kube\cache':
        Default cache directory

    --certificate-authority='':
        Path to a cert file for the certificate authority

    --client-certificate='':
        Path to a client certificate file for TLS

    --client-key='':
        Path to a client key file for TLS

    --cluster='':
        The name of the kubeconfig cluster to use

    --context='':
        The name of the kubeconfig context to use

    --insecure-skip-tls-verify=false:
        If true, the server's certificate will not be checked for validity. This will make your
        HTTPS connections insecure

    --kubeconfig='':
        Path to the kubeconfig file to use for CLI requests.

    --log-backtrace-at=:0:
        when logging hits line file:N, emit a stack trace (DEPRECATED: will be removed in a future
        release, see
        https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)

    --log-dir='':
        If non-empty, write log files in this directory (DEPRECATED: will be removed in a future
        release, see
        https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)

    --log-file='':
        If non-empty, use this log file (DEPRECATED: will be removed in a future release, see
        https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)

    --log-file-max-size=1800:
        Defines the maximum size a log file can grow to. Unit is megabytes. If the value is 0, the
        maximum file size is unlimited. (DEPRECATED: will be removed in a future release, see
        https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)

    --log-flush-frequency=5s:
        Maximum number of seconds between log flushes

    --logtostderr=true:
        log to standard error instead of files (DEPRECATED: will be removed in a future release,
        see
        https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)

    --match-server-version=false:
        Require server version to match client version

    -n, --namespace='':
        If present, the namespace scope for this CLI request

    --one-output=false:
        If true, only write logs to their native severity level (vs also writing to each lower
        severity level) (DEPRECATED: will be removed in a future release, see
        https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)

    --password='':
        Password for basic authentication to the API server

    --profile='none':
        Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)

    --profile-output='profile.pprof':
        Name of the file to write the profile to

    --request-timeout='0':
        The length of time to wait before giving up on a single server request. Non-zero values
        should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't
        timeout requests.

    -s, --server='':
        The address and port of the Kubernetes API server

    --skip-headers=false:
        If true, avoid header prefixes in the log messages (DEPRECATED: will be removed in a
        future release, see
        https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)

    --skip-log-headers=false:
        If true, avoid headers when opening log files (DEPRECATED: will be removed in a future
        release, see
        https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)

    --stderrthreshold=2:
        logs at or above this threshold go to stderr (DEPRECATED: will be removed in a future
        release, see
        https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)

    --tls-server-name='':
        Server name to use for server certificate validation. If it is not provided, the hostname
        used to contact the server is used

    --token='':
        Bearer token for authentication to the API server

    --user='':
        The name of the kubeconfig user to use

    --username='':
        Username for basic authentication to the API server

    -v, --v=0:
        number for the log level verbosity

    --vmodule=:
        comma-separated list of pattern=N settings for file-filtered logging

    --warnings-as-errors=false:
        Treat warnings received from the server as errors and exit with a non-zero exit code












(base) PS C:\Windows\system32> kubectl version
WARNING: This version information is deprecated and will be replaced with the output from kubectl version --short.  Use --output=yaml|json to get the full version.


Client Version: version.Info{Major:"1", Minor:"24", GitVersion:"v1.24.0", GitCommit:"4ce5a8954017644c5420bae81d72b09b735c21f0", GitTreeState:"clean", BuildDate:"2022-05-03T13:46:05Z", GoVersion:"go1.18.1", Compiler:"gc", Platform:"windows/amd64"}


Kustomize Version: v4.5.4
Server Version: version.Info{Major:"1", Minor:"24", GitVersion:"v1.24.0", GitCommit:"4ce5a8954017644c5420bae81d72b09b735c21f0", GitTreeState:"clean", BuildDate:"2022-05-03T13:38:19Z", GoVersion:"go1.18.1", Compiler:"gc", Platform:"linux/amd64"}













(base) PS C:\Windows\system32> kubectl cluster-info

Kubernetes control plane is running at https://kubernetes.docker.internal:6443

CoreDNS is running at https://kubernetes.docker.internal:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.



if you try to go to:  https://kubernetes.docker.internal:6443/


// 20220526135403
// https://kubernetes.docker.internal:6443/

{
  "kind": "Status",
  "apiVersion": "v1",
  "metadata": {
    
  },
  "status": "Failure",
  "message": "forbidden: User \"system:anonymous\" cannot get path \"/\"",
  "reason": "Forbidden",
  "details": {
    
  },
  "code": 403
}













(base) PS C:\Windows\system32> kubectl config current-context
docker-desktop










(base) PS C:\Windows\system32> docker

Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default
                           "C:\\Users\\tbresee\\.docker")
  -c, --context string     Name of the context to use to connect to the
                           daemon (overrides DOCKER_HOST env var and
                           default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level
                           ("debug"|"info"|"warn"|"error"|"fatal")
                           (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default
                           "C:\\Users\\tbresee\\.docker\\ca.pem")
      --tlscert string     Path to TLS certificate file (default
                           "C:\\Users\\tbresee\\.docker\\cert.pem")
      --tlskey string      Path to TLS key file (default
                           "C:\\Users\\tbresee\\.docker\\key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  builder     Manage builds
  buildx*     Docker Buildx (Docker Inc., v0.8.2)
  compose*    Docker Compose (Docker Inc., v2.5.1)
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  sbom*       View the packaged-based Software Bill Of Materials (SBOM) for an image (Anchore Inc., 0.6.0)
  scan*       Docker Scan (Docker Inc., v0.17.0)
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

Run 'docker COMMAND --help' for more information on a command.






base) PS C:\Windows\system32> kubectl cluster-info

Kubernetes control plane is running at https://kubernetes.docker.internal:6443
CoreDNS is running at https://kubernetes.docker.internal:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.







(base) PS C:\Windows\system32> kubectl get nodes --all-namespaces
NAME             STATUS   ROLES           AGE   VERSION
docker-desktop   Ready    control-plane   22h   v1.24.0



(base) PS C:\Windows\system32> $Env:kg = "kubectl get"









(base) PS C:\Windows\system32> kubectl get nodes --help
Display one or many resources.

 Prints a table of the most important information about the specified resources. You can filter the
list using a label selector and the --selector flag. If the desired resource type is namespaced you
will only see results in your current namespace unless you pass --all-namespaces.

 By specifying the output as 'template' and providing a Go template as the value of the --template
flag, you can filter the attributes of the fetched resources.

Use "kubectl api-resources" for a complete list of supported resources.

Examples:
  # List all pods in ps output format
  kubectl get pods

  # List all pods in ps output format with more information (such as node name)
  kubectl get pods -o wide

  # List a single replication controller with specified NAME in ps output format
  kubectl get replicationcontroller web

  # List deployments in JSON output format, in the "v1" version of the "apps" API group
  kubectl get deployments.v1.apps -o json

  # List a single pod in JSON output format
  kubectl get -o json pod web-pod-13je7

  # List a pod identified by type and name specified in "pod.yaml" in JSON output format
  kubectl get -f pod.yaml -o json

  # List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml
  kubectl get -k dir/

  # Return only the phase value of the specified pod
  kubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}

  # List resource information in custom columns
  kubectl get pod test-pod -o
custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image

  # List all replication controllers and services together in ps output format
  kubectl get rc,services

  # List one or more resources by their type and names
  kubectl get rc/web service/frontend pods/web-pod-13je7

  # List status subresource for a single pod.
  kubectl get pod web-pod-13je7 --subresource status

Options:
    -A, --all-namespaces=false:
        If present, list the requested object(s) across all namespaces. Namespace in current
        context is ignored even if specified with --namespace.

    --allow-missing-template-keys=true:
        If true, ignore any errors in templates when a field or map key is missing in the
        template. Only applies to golang and jsonpath output formats.

    --chunk-size=500:
        Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta
        and may change in the future.

    --field-selector='':
        Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector
        key1=value1,key2=value2). The server only supports a limited number of field queries per
        type.

    -f, --filename=[]:
        Filename, directory, or URL to files identifying the resource to get from a server.

    --ignore-not-found=false:
        If the requested object does not exist the command will return exit code 0.

    -k, --kustomize='':
        Process the kustomization directory. This flag can't be used together with -f or -R.

    -L, --label-columns=[]:
        Accepts a comma separated list of labels that are going to be presented as columns. Names
        are case-sensitive. You can also use multiple flag options like -L label1 -L label2...

    --no-headers=false:
        When using the default or custom-column output format, don't print headers (default print
        headers).

    -o, --output='':
        Output format. One of: (json, yaml, name, go-template, go-template-file, template,
        templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns,
        custom-columns-file, wide). See custom columns
        [https://kubernetes.io/docs/reference/kubectl/overview/#custom-columns], golang template
        [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template
        [https://kubernetes.io/docs/reference/kubectl/jsonpath/].

    --output-watch-events=false:
        Output watch event objects when --watch or --watch-only is used. Existing objects are
        output as initial ADDED events.

    --raw='':
        Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.

    -R, --recursive=false:
        Process the directory used in -f, --filename recursively. Useful when you want to manage
        related manifests organized within the same directory.

    -l, --selector='':
        Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l
        key1=value1,key2=value2). Matching objects must satisfy all of the specified label
        constraints.

    --server-print=true:
        If true, have the server return the appropriate table output. Supports extension APIs and
        CRDs.

    --show-kind=false:
        If present, list the resource type for the requested object(s).

    --show-labels=false:
        When printing, show all labels as the last column (default hide labels column)

    --show-managed-fields=false:
        If true, keep the managedFields when printing objects in JSON or YAML format.

    --sort-by='':
        If non-empty, sort list types using this field specification.  The field specification is
        expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API
        resource specified by this JSONPath expression must be an integer or a string.

    --subresource='':
        If specified, gets the subresource of the requested object. Must be one of [status scale].
        This flag is alpha and may change in the future.

    --template='':
        Template string or path to template file to use when -o=go-template, -o=go-template-file.
        The template format is golang templates
        [http://golang.org/pkg/text/template/#pkg-overview].

    -w, --watch=false:
        After listing/getting the requested object, watch for changes.

    --watch-only=false:
        Watch for changes to the requested object(s), without listing/getting first.

Usage:
  kubectl get
[(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide]
(TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags] [options]

Use "kubectl options" for a list of global command-line options (applies to all commands).
(base) PS C:\Windows\system32>








(base) PS C:\Windows\system32> kubectl get pods -o wide
NAME    READY   STATUS   RESTARTS   AGE   IP       NODE             NOMINATED NODE   READINESS GATES
kuard   0/1     Error    0          22h   <none>   docker-desktop   <none>           <none>









(base) PS C:\Windows\system32> kubectl get deployments --all-namespaces
NAMESPACE     NAME      READY   UP-TO-DATE   AVAILABLE   AGE
kube-system   coredns   2/2     2            2           22h





(base) PS C:\Windows\system32> kubectl config get-contexts                                               CURRENT   NAME             CLUSTER          AUTHINFO         NAMESPACE
*         docker-desktop   docker-desktop   docker-desktop




(base) PS C:\Windows\system32>  kubectl get services --all-namespaces
NAMESPACE     NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE
default       kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP                  22h
kube-system   kube-dns     ClusterIP   10.96.0.10   <none>        53/UDP,53/TCP,9153/TCP   22h








(base) PS C:\Windows\system32> kubectl get pods --all-namespaces
NAMESPACE     NAME                                     READY   STATUS    RESTARTS        AGE
default       kuard                                    0/1     Error     0               22h
kube-system   coredns-6d4b75cb6d-7lrqq                 1/1     Running   1 (136m ago)    22h
kube-system   coredns-6d4b75cb6d-hwrst                 1/1     Running   1 (136m ago)    22h
kube-system   etcd-docker-desktop                      1/1     Running   12 (136m ago)   22h
kube-system   kube-apiserver-docker-desktop            1/1     Running   12 (136m ago)   22h
kube-system   kube-controller-manager-docker-desktop   1/1     Running   12 (136m ago)   22h
kube-system   kube-proxy-rn8nq                         1/1     Running   1 (136m ago)    22h
kube-system   kube-scheduler-docker-desktop            1/1     Running   12 (136m ago)   22h
kube-system   storage-provisioner                      1/1     Running   2 (135m ago)    22h
kube-system   vpnkit-controller                        1/1     Running   16 (14m ago)    22h










(base) PS C:\Windows\system32> kubectl get pod -n kube-system etcd-docker-desktop -o yaml
apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubeadm.kubernetes.io/etcd.advertise-client-urls: https://192.168.65.4:2379
    kubernetes.io/config.hash: 2449ddc0985e3be8dd23ffc4d12cb53b
    kubernetes.io/config.mirror: 2449ddc0985e3be8dd23ffc4d12cb53b
    kubernetes.io/config.seen: "2022-05-25T22:06:27.058705604Z"
    kubernetes.io/config.source: file
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
  creationTimestamp: "2022-05-25T22:06:38Z"
  labels:
    component: etcd
    tier: control-plane
  name: etcd-docker-desktop
  namespace: kube-system
  ownerReferences:
  - apiVersion: v1
    controller: true
    kind: Node
    name: docker-desktop
    uid: 5d4ed3eb-b957-4919-9d83-4ca3ec667ed5
  resourceVersion: "4933"
  uid: 15a99fe4-4cb8-4c31-8475-db57bcb713e5
spec:
  containers:
  - command:
    - etcd
    - --advertise-client-urls=https://192.168.65.4:2379
    - --cert-file=/run/config/pki/etcd/server.crt
    - --client-cert-auth=true
    - --data-dir=/var/lib/etcd
    - --experimental-initial-corrupt-check=true
    - --initial-advertise-peer-urls=https://192.168.65.4:2380
    - --initial-cluster=docker-desktop=https://192.168.65.4:2380
    - --key-file=/run/config/pki/etcd/server.key
    - --listen-client-urls=https://127.0.0.1:2379,https://192.168.65.4:2379
    - --listen-metrics-urls=http://127.0.0.1:2381
    - --listen-peer-urls=https://192.168.65.4:2380
    - --name=docker-desktop
    - --peer-cert-file=/run/config/pki/etcd/peer.crt
    - --peer-client-cert-auth=true
    - --peer-key-file=/run/config/pki/etcd/peer.key
    - --peer-trusted-ca-file=/run/config/pki/etcd/ca.crt
    - --snapshot-count=10000
    - --trusted-ca-file=/run/config/pki/etcd/ca.crt
    image: k8s.gcr.io/etcd:3.5.3-0
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: 127.0.0.1
        path: /health
        port: 2381
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 15
    name: etcd
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
    startupProbe:
      failureThreshold: 24
      httpGet:
        host: 127.0.0.1
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 15
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/lib/etcd
      name: etcd-data
    - mountPath: /run/config/pki/etcd
      name: etcd-certs
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  hostNetwork: true
  nodeName: docker-desktop
  preemptionPolicy: PreemptLowerPriority
  priority: 2000001000
  priorityClassName: system-node-critical
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext:
    seccompProfile:
      type: RuntimeDefault
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    operator: Exists
  volumes:
  - hostPath:
      path: /run/config/pki/etcd
      type: DirectoryOrCreate
    name: etcd-certs
  - hostPath:
      path: /var/lib/etcd
      type: DirectoryOrCreate
    name: etcd-data
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2022-05-26T18:31:19Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2022-05-26T18:31:39Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2022-05-26T18:31:39Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2022-05-26T18:31:19Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://dec9a8f77a592dde47989b6433d5fd6d2297c6a506c807c9d67d34faa88f5006
    image: k8s.gcr.io/etcd:3.5.3-0
    imageID: docker://sha256:aebe758cef4cd05b9f8cee39758227714d02f42ef3088023c1e3cd454f927a2b
    lastState:
      terminated:
        containerID: docker://38672dca8c046f53660daf0fa548f3800fec66cc80750c88632e4f6bc4ce46f6
        exitCode: 255
        finishedAt: "2022-05-26T18:31:10Z"
        reason: Error
        startedAt: "2022-05-25T22:06:28Z"
    name: etcd
    ready: true
    restartCount: 12
    started: true
    state:
      running:
        startedAt: "2022-05-26T18:31:20Z"
  hostIP: 192.168.65.4
  phase: Running
  podIP: 192.168.65.4
  podIPs:
  - ip: 192.168.65.4
  qosClass: Burstable
  startTime: "2022-05-26T18:31:19Z"










(base) PS C:\Windows\system32> kubectl get pod -n kube-system -o yaml
apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2022-05-25T22:06:37Z"
    generateName: coredns-6d4b75cb6d-
    labels:
      k8s-app: kube-dns
      pod-template-hash: 6d4b75cb6d
    name: coredns-6d4b75cb6d-7lrqq
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-6d4b75cb6d
      uid: ca2ca698-79dd-404d-80cf-cf543d9f3d4c
    resourceVersion: "4948"
    uid: 3730340f-1a41-4a31-a441-059bee4043bb
  spec:
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: k8s.gcr.io/coredns/coredns:v1.8.6
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c5ccq
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: docker-desktop
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-c5ccq
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-05-25T22:07:01Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:51Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:51Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-05-25T22:07:01Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://dc606eec85cef8e798a7f4db95486a8bc699364c1c2207f1f522d7f1fbd46420
      image: k8s.gcr.io/coredns/coredns:v1.8.6
      imageID: docker://sha256:a4ca41631cc7ac19ce1be3ebf0314ac5f47af7c711f17066006db82ee3b75b03
      lastState:
        terminated:
          containerID: docker://8bdf31679afa3922d0b5532ab2833551f9b361cba5c1c6ffc068860974f12f8b
          exitCode: 255
          finishedAt: "2022-05-26T18:31:10Z"
          reason: Error
          startedAt: "2022-05-25T22:07:02Z"
      name: coredns
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2022-05-26T18:31:29Z"
    hostIP: 192.168.65.4
    phase: Running
    podIP: 10.1.0.63
    podIPs:
    - ip: 10.1.0.63
    qosClass: Burstable
    startTime: "2022-05-25T22:07:01Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2022-05-25T22:06:37Z"
    generateName: coredns-6d4b75cb6d-
    labels:
      k8s-app: kube-dns
      pod-template-hash: 6d4b75cb6d
    name: coredns-6d4b75cb6d-hwrst
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-6d4b75cb6d
      uid: ca2ca698-79dd-404d-80cf-cf543d9f3d4c
    resourceVersion: "4954"
    uid: a33926cd-36df-4922-9fee-d7a485efa802
  spec:
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: k8s.gcr.io/coredns/coredns:v1.8.6
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-swwzf
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: docker-desktop
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-swwzf
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-05-25T22:07:01Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:53Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:53Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-05-25T22:07:01Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://02eaaf85e036ffcf903c168af81fa952a3a7c4143486845e43ffa3267ce9e1ec
      image: k8s.gcr.io/coredns/coredns:v1.8.6
      imageID: docker://sha256:a4ca41631cc7ac19ce1be3ebf0314ac5f47af7c711f17066006db82ee3b75b03
      lastState:
        terminated:
          containerID: docker://2e5b93149d999bd9c3dc90f3215ada4a753f6f44656a88f6e21b89ebd4b35c7b
          exitCode: 255
          finishedAt: "2022-05-26T18:31:10Z"
          reason: Error
          startedAt: "2022-05-25T22:07:02Z"
      name: coredns
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2022-05-26T18:31:28Z"
    hostIP: 192.168.65.4
    phase: Running
    podIP: 10.1.0.62
    podIPs:
    - ip: 10.1.0.62
    qosClass: Burstable
    startTime: "2022-05-25T22:07:01Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubeadm.kubernetes.io/etcd.advertise-client-urls: https://192.168.65.4:2379
      kubernetes.io/config.hash: 2449ddc0985e3be8dd23ffc4d12cb53b
      kubernetes.io/config.mirror: 2449ddc0985e3be8dd23ffc4d12cb53b
      kubernetes.io/config.seen: "2022-05-25T22:06:27.058705604Z"
      kubernetes.io/config.source: file
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2022-05-25T22:06:38Z"
    labels:
      component: etcd
      tier: control-plane
    name: etcd-docker-desktop
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: docker-desktop
      uid: 5d4ed3eb-b957-4919-9d83-4ca3ec667ed5
    resourceVersion: "4933"
    uid: 15a99fe4-4cb8-4c31-8475-db57bcb713e5
  spec:
    containers:
    - command:
      - etcd
      - --advertise-client-urls=https://192.168.65.4:2379
      - --cert-file=/run/config/pki/etcd/server.crt
      - --client-cert-auth=true
      - --data-dir=/var/lib/etcd
      - --experimental-initial-corrupt-check=true
      - --initial-advertise-peer-urls=https://192.168.65.4:2380
      - --initial-cluster=docker-desktop=https://192.168.65.4:2380
      - --key-file=/run/config/pki/etcd/server.key
      - --listen-client-urls=https://127.0.0.1:2379,https://192.168.65.4:2379
      - --listen-metrics-urls=http://127.0.0.1:2381
      - --listen-peer-urls=https://192.168.65.4:2380
      - --name=docker-desktop
      - --peer-cert-file=/run/config/pki/etcd/peer.crt
      - --peer-client-cert-auth=true
      - --peer-key-file=/run/config/pki/etcd/peer.key
      - --peer-trusted-ca-file=/run/config/pki/etcd/ca.crt
      - --snapshot-count=10000
      - --trusted-ca-file=/run/config/pki/etcd/ca.crt
      image: k8s.gcr.io/etcd:3.5.3-0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /health
          port: 2381
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: etcd
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /health
          port: 2381
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/etcd
        name: etcd-data
      - mountPath: /run/config/pki/etcd
        name: etcd-certs
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: docker-desktop
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /run/config/pki/etcd
        type: DirectoryOrCreate
      name: etcd-certs
    - hostPath:
        path: /var/lib/etcd
        type: DirectoryOrCreate
      name: etcd-data
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:19Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:39Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:39Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:19Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://dec9a8f77a592dde47989b6433d5fd6d2297c6a506c807c9d67d34faa88f5006
      image: k8s.gcr.io/etcd:3.5.3-0
      imageID: docker://sha256:aebe758cef4cd05b9f8cee39758227714d02f42ef3088023c1e3cd454f927a2b
      lastState:
        terminated:
          containerID: docker://38672dca8c046f53660daf0fa548f3800fec66cc80750c88632e4f6bc4ce46f6
          exitCode: 255
          finishedAt: "2022-05-26T18:31:10Z"
          reason: Error
          startedAt: "2022-05-25T22:06:28Z"
      name: etcd
      ready: true
      restartCount: 12
      started: true
      state:
        running:
          startedAt: "2022-05-26T18:31:20Z"
    hostIP: 192.168.65.4
    phase: Running
    podIP: 192.168.65.4
    podIPs:
    - ip: 192.168.65.4
    qosClass: Burstable
    startTime: "2022-05-26T18:31:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 192.168.65.4:6443
      kubernetes.io/config.hash: f76ea91a200a6b1cfe31c7a114460aac
      kubernetes.io/config.mirror: f76ea91a200a6b1cfe31c7a114460aac
      kubernetes.io/config.seen: "2022-05-25T22:06:27.058720322Z"
      kubernetes.io/config.source: file
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2022-05-25T22:06:34Z"
    labels:
      component: kube-apiserver
      tier: control-plane
    name: kube-apiserver-docker-desktop
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: docker-desktop
      uid: 5d4ed3eb-b957-4919-9d83-4ca3ec667ed5
    resourceVersion: "4924"
    uid: 81dddf13-bdc7-4987-b1c0-d55cc45ab12d
  spec:
    containers:
    - command:
      - kube-apiserver
      - --advertise-address=192.168.65.4
      - --allow-privileged=true
      - --authorization-mode=Node,RBAC
      - --client-ca-file=/run/config/pki/ca.crt
      - --enable-admission-plugins=NodeRestriction
      - --enable-bootstrap-token-auth=true
      - --etcd-cafile=/run/config/pki/etcd/ca.crt
      - --etcd-certfile=/run/config/pki/apiserver-etcd-client.crt
      - --etcd-keyfile=/run/config/pki/apiserver-etcd-client.key
      - --etcd-servers=https://127.0.0.1:2379
      - --kubelet-client-certificate=/run/config/pki/apiserver-kubelet-client.crt
      - --kubelet-client-key=/run/config/pki/apiserver-kubelet-client.key
      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
      - --proxy-client-cert-file=/run/config/pki/front-proxy-client.crt
      - --proxy-client-key-file=/run/config/pki/front-proxy-client.key
      - --requestheader-allowed-names=front-proxy-client
      - --requestheader-client-ca-file=/run/config/pki/front-proxy-ca.crt
      - --requestheader-extra-headers-prefix=X-Remote-Extra-
      - --requestheader-group-headers=X-Remote-Group
      - --requestheader-username-headers=X-Remote-User
      - --secure-port=6443
      - --service-account-issuer=https://kubernetes.default.svc.cluster.local
      - --service-account-key-file=/run/config/pki/sa.pub
      - --service-account-signing-key-file=/run/config/pki/sa.key
      - --service-cluster-ip-range=10.96.0.0/12
      - --tls-cert-file=/run/config/pki/apiserver.crt
      - --tls-private-key-file=/run/config/pki/apiserver.key
      - --watch-cache=false
      image: k8s.gcr.io/kube-apiserver:v1.24.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 192.168.65.4
          path: /livez
          port: 6443
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-apiserver
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: 192.168.65.4
          path: /readyz
          port: 6443
          scheme: HTTPS
        periodSeconds: 1
        successThreshold: 1
        timeoutSeconds: 15
      resources:
        requests:
          cpu: 250m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 192.168.65.4
          path: /livez
          port: 6443
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: ca-certs
        readOnly: true
      - mountPath: /etc/ca-certificates
        name: etc-ca-certificates
        readOnly: true
      - mountPath: /run/config/pki
        name: k8s-certs
        readOnly: true
      - mountPath: /usr/local/share/ca-certificates
        name: usr-local-share-ca-certificates
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-share-ca-certificates
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: docker-desktop
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: ca-certs
    - hostPath:
        path: /etc/ca-certificates
        type: DirectoryOrCreate
      name: etc-ca-certificates
    - hostPath:
        path: /run/config/pki
        type: DirectoryOrCreate
      name: k8s-certs
    - hostPath:
        path: /usr/local/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-local-share-ca-certificates
    - hostPath:
        path: /usr/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-share-ca-certificates
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-05-25T22:06:27Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:34Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:34Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-05-25T22:06:27Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://930896ebb746939bbc5d981f9eda37e19cdb16914472f78fa3d8d8c78b86e115
      image: k8s.gcr.io/kube-apiserver:v1.24.0
      imageID: docker://sha256:529072250ccc6301cb341cd7359c9641b94a6f837f86f82b1223a59bb0712e64
      lastState:
        terminated:
          containerID: docker://bf8f1e370932dc11d0878a614f7e5f70abc66c25e0a9a6052168139dfd7d99cf
          exitCode: 255
          finishedAt: "2022-05-26T18:31:10Z"
          reason: Error
          startedAt: "2022-05-25T22:06:28Z"
      name: kube-apiserver
      ready: true
      restartCount: 12
      started: true
      state:
        running:
          startedAt: "2022-05-26T18:31:20Z"
    hostIP: 192.168.65.4
    phase: Running
    podIP: 192.168.65.4
    podIPs:
    - ip: 192.168.65.4
    qosClass: Burstable
    startTime: "2022-05-25T22:06:27Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: d9c6bbd179b0d64e8d303a659acf3a74
      kubernetes.io/config.mirror: d9c6bbd179b0d64e8d303a659acf3a74
      kubernetes.io/config.seen: "2022-05-25T22:06:27.058721584Z"
      kubernetes.io/config.source: file
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2022-05-25T22:06:39Z"
    labels:
      component: kube-controller-manager
      tier: control-plane
    name: kube-controller-manager-docker-desktop
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: docker-desktop
      uid: 5d4ed3eb-b957-4919-9d83-4ca3ec667ed5
    resourceVersion: "4912"
    uid: 6fe7b62c-fafd-443f-97fd-3d493ff1ca7c
  spec:
    containers:
    - command:
      - kube-controller-manager
      - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
      - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
      - --bind-address=127.0.0.1
      - --client-ca-file=/run/config/pki/ca.crt
      - --cluster-name=kubernetes
      - --cluster-signing-cert-file=/run/config/pki/ca.crt
      - --cluster-signing-key-file=/run/config/pki/ca.key
      - --controllers=*,bootstrapsigner,tokencleaner
      - --horizontal-pod-autoscaler-sync-period=60s
      - --kubeconfig=/etc/kubernetes/controller-manager.conf
      - --leader-elect=false
      - --node-monitor-grace-period=180s
      - --node-monitor-period=30s
      - --pvclaimbinder-sync-period=60s
      - --requestheader-client-ca-file=/run/config/pki/front-proxy-ca.crt
      - --root-ca-file=/run/config/pki/ca.crt
      - --service-account-private-key-file=/run/config/pki/sa.key
      - --use-service-account-credentials=true
      image: k8s.gcr.io/kube-controller-manager:v1.24.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10257
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-controller-manager
      resources:
        requests:
          cpu: 200m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10257
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: ca-certs
        readOnly: true
      - mountPath: /etc/ca-certificates
        name: etc-ca-certificates
        readOnly: true
      - mountPath: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
        name: flexvolume-dir
      - mountPath: /run/config/pki
        name: k8s-certs
        readOnly: true
      - mountPath: /etc/kubernetes/controller-manager.conf
        name: kubeconfig
        readOnly: true
      - mountPath: /usr/local/share/ca-certificates
        name: usr-local-share-ca-certificates
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-share-ca-certificates
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: docker-desktop
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: ca-certs
    - hostPath:
        path: /etc/ca-certificates
        type: DirectoryOrCreate
      name: etc-ca-certificates
    - hostPath:
        path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
        type: DirectoryOrCreate
      name: flexvolume-dir
    - hostPath:
        path: /run/config/pki
        type: DirectoryOrCreate
      name: k8s-certs
    - hostPath:
        path: /etc/kubernetes/controller-manager.conf
        type: FileOrCreate
      name: kubeconfig
    - hostPath:
        path: /usr/local/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-local-share-ca-certificates
    - hostPath:
        path: /usr/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-share-ca-certificates
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:19Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:31Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:31Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:19Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://530f8d9cf0e36f31f16eeae31060cb6e8c0c19818a4ddefc693344ecac475f59
      image: k8s.gcr.io/kube-controller-manager:v1.24.0
      imageID: docker://sha256:88784fb4ac2f696b8fed607f6aa8bd5710544652f4ca166462937a36368f6364
      lastState:
        terminated:
          containerID: docker://ff48b0c4863881fd755a9fc521becc4da0b94af8a26a46cd312619f12416bd52
          exitCode: 255
          finishedAt: "2022-05-26T18:31:10Z"
          reason: Error
          startedAt: "2022-05-25T22:06:28Z"
      name: kube-controller-manager
      ready: true
      restartCount: 12
      started: true
      state:
        running:
          startedAt: "2022-05-26T18:31:20Z"
    hostIP: 192.168.65.4
    phase: Running
    podIP: 192.168.65.4
    podIPs:
    - ip: 192.168.65.4
    qosClass: Burstable
    startTime: "2022-05-26T18:31:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2022-05-25T22:06:37Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 8db7f9b94
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-rn8nq
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 9a162897-c8b3-4bd9-bbbb-d19accbd503b
    resourceVersion: "4870"
    uid: 0a55b85e-3d4a-4a9b-9f80-3febffc40965
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - docker-desktop
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: k8s.gcr.io/kube-proxy:v1.24.0
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-sbjfr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: docker-desktop
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-api-access-sbjfr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-05-25T22:06:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:26Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:26Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-05-25T22:06:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://18cb00d83a9a7d277f98a3268b7b369f43bd0a96d4c7a47ea83787c28b8c193d
      image: k8s.gcr.io/kube-proxy:v1.24.0
      imageID: docker://sha256:77b49675beae1d7a23dbd96d367e8ae0fd3318631f270455e0c3e5e771232505
      lastState:
        terminated:
          containerID: docker://c983e7502bf2f52378eb01c96fe07a2b880386e881fa2d6ab6c157f02bbc4439
          exitCode: 255
          finishedAt: "2022-05-26T18:31:10Z"
          reason: Error
          startedAt: "2022-05-25T22:06:38Z"
      name: kube-proxy
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2022-05-26T18:31:26Z"
    hostIP: 192.168.65.4
    phase: Running
    podIP: 192.168.65.4
    podIPs:
    - ip: 192.168.65.4
    qosClass: BestEffort
    startTime: "2022-05-25T22:06:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 1fa929fab6e17047f7779b2ab8125174
      kubernetes.io/config.mirror: 1fa929fab6e17047f7779b2ab8125174
      kubernetes.io/config.seen: "2022-05-25T22:06:27.058723608Z"
      kubernetes.io/config.source: file
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2022-05-25T22:06:37Z"
    labels:
      component: kube-scheduler
      tier: control-plane
    name: kube-scheduler-docker-desktop
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: docker-desktop
      uid: 5d4ed3eb-b957-4919-9d83-4ca3ec667ed5
    resourceVersion: "4906"
    uid: 8a41a715-d5e5-479e-89a8-fba2ea3b55c0
  spec:
    containers:
    - command:
      - kube-scheduler
      - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
      - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
      - --bind-address=127.0.0.1
      - --kubeconfig=/etc/kubernetes/scheduler.conf
      - --leader-elect=true
      image: k8s.gcr.io/kube-scheduler:v1.24.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10259
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-scheduler
      resources:
        requests:
          cpu: 100m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10259
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/kubernetes/scheduler.conf
        name: kubeconfig
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: docker-desktop
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/kubernetes/scheduler.conf
        type: FileOrCreate
      name: kubeconfig
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:19Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:30Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:30Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:31:19Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://a8c21eaaf93d4178beefe7995d8a8878291ca309f0d2fe24a85848d300e4fa25
      image: k8s.gcr.io/kube-scheduler:v1.24.0
      imageID: docker://sha256:e3ed7dee73e9341d613017a135d2e8e6f169b16ffdcf0564a67147aef941322d
      lastState:
        terminated:
          containerID: docker://b65009d6322054529f6b677fad7ffd08f26aa84e77bf0fd878c54751799d91b6
          exitCode: 255
          finishedAt: "2022-05-26T18:31:10Z"
          reason: Error
          startedAt: "2022-05-25T22:06:28Z"
      name: kube-scheduler
      ready: true
      restartCount: 12
      started: true
      state:
        running:
          startedAt: "2022-05-26T18:31:20Z"
    hostIP: 192.168.65.4
    phase: Running
    podIP: 192.168.65.4
    podIPs:
    - ip: 192.168.65.4
    qosClass: Burstable
    startTime: "2022-05-26T18:31:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"labels":{"component":"storage-provisioner"},"name":"storage-provisioner","namespace":"kube-system"},"spec":{"containers":[{"args":["/var/lib/k8s-pvs"],"image":"docker/desktop-storage-provisioner:v2.0","imagePullPolicy":"IfNotPresent","name":"storage-provisioner","volumeMounts":[{"mountPath":"/var/lib/k8s-pvs","name":"pvs"}]}],"serviceAccountName":"storage-provisioner","volumes":[{"hostPath":{"path":"/var/lib/k8s-pvs","type":"Directory"},"name":"pvs"}]}}
    creationTimestamp: "2022-05-25T22:07:07Z"
    labels:
      component: storage-provisioner
    name: storage-provisioner
    namespace: kube-system
    resourceVersion: "4970"
    uid: c258b195-ebf4-4514-b8a8-bfaa763a7be3
  spec:
    containers:
    - args:
      - /var/lib/k8s-pvs
      image: docker/desktop-storage-provisioner:v2.0
      imagePullPolicy: IfNotPresent
      name: storage-provisioner
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/k8s-pvs
        name: pvs
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r6tdr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: docker-desktop
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: storage-provisioner
    serviceAccountName: storage-provisioner
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - hostPath:
        path: /var/lib/k8s-pvs
        type: Directory
      name: pvs
    - name: kube-api-access-r6tdr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-05-25T22:07:07Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:32:02Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T18:32:02Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-05-25T22:07:07Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://6e8139054f12e11be0458d657ded37fa456c373ff0c11e6b8e8a614c93abcbe4
      image: docker/desktop-storage-provisioner:v2.0
      imageID: docker://sha256:99f89471f4708f1173e688f7f77bf6b995b10355a46cc388b273b0130add7aad
      lastState:
        terminated:
          containerID: docker://2722b6ecd867dbbc85bb7a39cb838a5cc757cbb595420ef111e834ee9afea7a0
          exitCode: 1
          finishedAt: "2022-05-26T18:31:49Z"
          reason: Error
          startedAt: "2022-05-26T18:31:28Z"
      name: storage-provisioner
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2022-05-26T18:32:02Z"
    hostIP: 192.168.65.4
    phase: Running
    podIP: 10.1.0.61
    podIPs:
    - ip: 10.1.0.61
    qosClass: BestEffort
    startTime: "2022-05-25T22:07:07Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"labels":{"component":"vpnkit-controller"},"name":"vpnkit-controller","namespace":"kube-system"},"spec":{"containers":[{"command":["/kube-vpnkit-forwarder","-path","/run/host-services/backend.sock"],"image":"docker/desktop-vpnkit-controller:v2.0","imagePullPolicy":"IfNotPresent","name":"vpnkit-controller","volumeMounts":[{"mountPath":"/run/host-services/backend.sock","name":"api"}]}],"serviceAccountName":"vpnkit-controller","volumes":[{"hostPath":{"path":"/run/host-services/backend.sock"},"name":"api"}]}}
    creationTimestamp: "2022-05-25T22:07:07Z"
    labels:
      component: vpnkit-controller
    name: vpnkit-controller
    namespace: kube-system
    resourceVersion: "13961"
    uid: 1de9c554-dcba-4636-bfee-39935c324e58
  spec:
    containers:
    - command:
      - /kube-vpnkit-forwarder
      - -path
      - /run/host-services/backend.sock
      image: docker/desktop-vpnkit-controller:v2.0
      imagePullPolicy: IfNotPresent
      name: vpnkit-controller
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /run/host-services/backend.sock
        name: api
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-kbbtr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: docker-desktop
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: vpnkit-controller
    serviceAccountName: vpnkit-controller
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - hostPath:
        path: /run/host-services/backend.sock
        type: ""
      name: api
    - name: kube-api-access-kbbtr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-05-25T22:07:07Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T20:32:57Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2022-05-26T20:32:57Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-05-25T22:07:07Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://ed946906614f6d5c87853dc75d0da377d1605a85b91a9e1f19746e8ee75d9603
      image: docker/desktop-vpnkit-controller:v2.0
      imageID: docker://sha256:8c2c38aa676e97e57b4c8385bbcdcb240a933fafcc5f6cc508d2a3a005b24cb8
      lastState:
        terminated:
          containerID: docker://167727aed89725248946e62c91c836aaca29d8d4b22182266585deddd9a8b72d
          exitCode: 2
          finishedAt: "2022-05-26T20:32:45Z"
          reason: Error
          startedAt: "2022-05-26T20:24:44Z"
      name: vpnkit-controller
      ready: true
      restartCount: 16
      started: true
      state:
        running:
          startedAt: "2022-05-26T20:32:57Z"
    hostIP: 192.168.65.4
    phase: Running
    podIP: 10.1.0.64
    podIPs:
    - ip: 10.1.0.64
    qosClass: BestEffort
    startTime: "2022-05-25T22:07:07Z"
kind: List
metadata:
  resourceVersion: ""
(base) PS C:\Windows\system32>










(base) PS C:\Windows\system32> kubectl describe nodes docker-desktop
Name:               docker-desktop
Roles:              control-plane
Labels:             beta.kubernetes.io/arch=amd64
                    beta.kubernetes.io/os=linux
                    kubernetes.io/arch=amd64
                    kubernetes.io/hostname=docker-desktop
                    kubernetes.io/os=linux
                    node-role.kubernetes.io/control-plane=
                    node.kubernetes.io/exclude-from-external-load-balancers=
Annotations:        kubeadm.alpha.kubernetes.io/cri-socket: unix:///var/run/cri-dockerd.sock
                    node.alpha.kubernetes.io/ttl: 0
Taints:             <none>
Unschedulable:      false
Lease:
  HolderIdentity:  docker-desktop
  AcquireTime:     <unset>
  RenewTime:       Thu, 26 May 2022 16:04:13 -0500
Conditions:
  Type             Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message
  ----             ------  -----------------                 ------------------                ------                       -------
  MemoryPressure   False   Thu, 26 May 2022 16:03:57 -0500   Wed, 25 May 2022 17:06:28 -0500   KubeletHasSufficientMemory   kubelet has sufficient memory available
  DiskPressure     False   Thu, 26 May 2022 16:03:57 -0500   Wed, 25 May 2022 17:06:28 -0500   KubeletHasNoDiskPressure     kubelet has no disk pressure
  PIDPressure      False   Thu, 26 May 2022 16:03:57 -0500   Wed, 25 May 2022 17:06:28 -0500   KubeletHasSufficientPID      kubelet has sufficient PID available
  Ready            True    Thu, 26 May 2022 16:03:57 -0500   Wed, 25 May 2022 17:07:01 -0500   KubeletReady                 kubelet is posting ready status
Addresses:
  InternalIP:  192.168.65.4
  Hostname:    docker-desktop
Capacity:
  cpu:                24
  ephemeral-storage:  263174212Ki
  hugepages-1Gi:      0
  hugepages-2Mi:      0
  memory:             52602964Ki
  pods:               110
Allocatable:
  cpu:                24
  ephemeral-storage:  242541353378
  hugepages-1Gi:      0
  hugepages-2Mi:      0
  memory:             52500564Ki
  pods:               110
System Info:
  Machine ID:                 27bb5c95-c4b7-438c-bed1-ed90bac37fb7
  System UUID:                27bb5c95-c4b7-438c-bed1-ed90bac37fb7
  Boot ID:                    91ce0876-cdcc-46f8-9898-8c9c0c68194a
  Kernel Version:             5.10.16.3-microsoft-standard-WSL2
  OS Image:                   Docker Desktop
  Operating System:           linux
  Architecture:               amd64
  Container Runtime Version:  docker://20.10.14
  Kubelet Version:            v1.24.0
  Kube-Proxy Version:         v1.24.0
Non-terminated Pods:          (9 in total)
  Namespace                   Name                                      CPU Requests  CPU Limits  Memory Requests  Memory Limits  Age
  ---------                   ----                                      ------------  ----------  ---------------  -------------  ---
  kube-system                 coredns-6d4b75cb6d-7lrqq                  100m (0%)     0 (0%)      70Mi (0%)        170Mi (0%)     22h
  kube-system                 coredns-6d4b75cb6d-hwrst                  100m (0%)     0 (0%)      70Mi (0%)        170Mi (0%)     22h
  kube-system                 etcd-docker-desktop                       100m (0%)     0 (0%)      100Mi (0%)       0 (0%)         22h
  kube-system                 kube-apiserver-docker-desktop             250m (1%)     0 (0%)      0 (0%)           0 (0%)         22h
  kube-system                 kube-controller-manager-docker-desktop    200m (0%)     0 (0%)      0 (0%)           0 (0%)         22h
  kube-system                 kube-proxy-rn8nq                          0 (0%)        0 (0%)      0 (0%)           0 (0%)         22h
  kube-system                 kube-scheduler-docker-desktop             100m (0%)     0 (0%)      0 (0%)           0 (0%)         22h
  kube-system                 storage-provisioner                       0 (0%)        0 (0%)      0 (0%)           0 (0%)         22h
  kube-system                 vpnkit-controller                         0 (0%)        0 (0%)      0 (0%)           0 (0%)         22h
Allocated resources:
  (Total limits may be over 100 percent, i.e., overcommitted.)
  Resource           Requests    Limits
  --------           --------    ------
  cpu                850m (3%)   0 (0%)
  memory             240Mi (0%)  340Mi (0%)
  ephemeral-storage  0 (0%)      0 (0%)
  hugepages-1Gi      0 (0%)      0 (0%)
  hugepages-2Mi      0 (0%)      0 (0%)
Events:              <none>










(base) PS C:\Windows\system32> kubectl get pods --all-namespaces
NAMESPACE     NAME                                     READY   STATUS    RESTARTS         AGE
default       kuard                                    0/1     Error     0                22h
kube-system   coredns-6d4b75cb6d-7lrqq                 1/1     Running   1 (154m ago)     22h
kube-system   coredns-6d4b75cb6d-hwrst                 1/1     Running   1 (154m ago)     22h
kube-system   etcd-docker-desktop                      1/1     Running   12 (154m ago)    22h
kube-system   kube-apiserver-docker-desktop            1/1     Running   12 (154m ago)    22h
kube-system   kube-controller-manager-docker-desktop   1/1     Running   12 (154m ago)    22h
kube-system   kube-proxy-rn8nq                         1/1     Running   1 (154m ago)     22h
kube-system   kube-scheduler-docker-desktop            1/1     Running   12 (154m ago)    22h
kube-system   storage-provisioner                      1/1     Running   2 (153m ago)     22h
kube-system   vpnkit-controller                        1/1     Running   18 (6m37s ago)   22h







(base) PS C:\Windows\system32> kubectl get pods -n kubesystem
No resources found in kubesystem namespace.








(base) PS C:\Windows\system32> kubectl get pods -n kube-system
NAME                                     READY   STATUS    RESTARTS         AGE
coredns-6d4b75cb6d-7lrqq                 1/1     Running   1 (154m ago)     22h
coredns-6d4b75cb6d-hwrst                 1/1     Running   1 (154m ago)     22h
etcd-docker-desktop                      1/1     Running   12 (154m ago)    22h
kube-apiserver-docker-desktop            1/1     Running   12 (154m ago)    22h
kube-controller-manager-docker-desktop   1/1     Running   12 (154m ago)    22h
kube-proxy-rn8nq                         1/1     Running   1 (154m ago)     22h
kube-scheduler-docker-desktop            1/1     Running   12 (154m ago)    22h
storage-provisioner                      1/1     Running   2 (153m ago)     22h
vpnkit-controller                        1/1     Running   18 (6m50s ago)   22h
(base) PS C:\Windows\system32> kubectl describe pods -n kube-system
Name:                 coredns-6d4b75cb6d-7lrqq
Namespace:            kube-system
Priority:             2000000000
Priority Class Name:  system-cluster-critical
Node:                 docker-desktop/192.168.65.4
Start Time:           Wed, 25 May 2022 17:07:01 -0500
Labels:               k8s-app=kube-dns
                      pod-template-hash=6d4b75cb6d
Annotations:          <none>
Status:               Running
IP:                   10.1.0.63
IPs:
  IP:           10.1.0.63
Controlled By:  ReplicaSet/coredns-6d4b75cb6d
Containers:
  coredns:
    Container ID:  docker://dc606eec85cef8e798a7f4db95486a8bc699364c1c2207f1f522d7f1fbd46420
    Image:         k8s.gcr.io/coredns/coredns:v1.8.6
    Image ID:      docker://sha256:a4ca41631cc7ac19ce1be3ebf0314ac5f47af7c711f17066006db82ee3b75b03
    Ports:         53/UDP, 53/TCP, 9153/TCP
    Host Ports:    0/UDP, 0/TCP, 0/TCP
    Args:
      -conf
      /etc/coredns/Corefile
    State:          Running
      Started:      Thu, 26 May 2022 13:31:29 -0500
    Last State:     Terminated
      Reason:       Error
      Exit Code:    255
      Started:      Wed, 25 May 2022 17:07:02 -0500
      Finished:     Thu, 26 May 2022 13:31:10 -0500
    Ready:          True
    Restart Count:  1
    Limits:
      memory:  170Mi
    Requests:
      cpu:        100m
      memory:     70Mi
    Liveness:     http-get http://:8080/health delay=60s timeout=5s period=10s #success=1 #failure=5
    Readiness:    http-get http://:8181/ready delay=0s timeout=1s period=10s #success=1 #failure=3
    Environment:  <none>
    Mounts:
      /etc/coredns from config-volume (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-c5ccq (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  config-volume:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      coredns
    Optional:  false
  kube-api-access-c5ccq:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              kubernetes.io/os=linux
Tolerations:                 CriticalAddonsOnly op=Exists
                             node-role.kubernetes.io/control-plane:NoSchedule
                             node-role.kubernetes.io/master:NoSchedule
                             node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:                      <none>


Name:                 coredns-6d4b75cb6d-hwrst
Namespace:            kube-system
Priority:             2000000000
Priority Class Name:  system-cluster-critical
Node:                 docker-desktop/192.168.65.4
Start Time:           Wed, 25 May 2022 17:07:01 -0500
Labels:               k8s-app=kube-dns
                      pod-template-hash=6d4b75cb6d
Annotations:          <none>
Status:               Running
IP:                   10.1.0.62
IPs:
  IP:           10.1.0.62
Controlled By:  ReplicaSet/coredns-6d4b75cb6d
Containers:
  coredns:
    Container ID:  docker://02eaaf85e036ffcf903c168af81fa952a3a7c4143486845e43ffa3267ce9e1ec
    Image:         k8s.gcr.io/coredns/coredns:v1.8.6
    Image ID:      docker://sha256:a4ca41631cc7ac19ce1be3ebf0314ac5f47af7c711f17066006db82ee3b75b03
    Ports:         53/UDP, 53/TCP, 9153/TCP
    Host Ports:    0/UDP, 0/TCP, 0/TCP
    Args:
      -conf
      /etc/coredns/Corefile
    State:          Running
      Started:      Thu, 26 May 2022 13:31:28 -0500
    Last State:     Terminated
      Reason:       Error
      Exit Code:    255
      Started:      Wed, 25 May 2022 17:07:02 -0500
      Finished:     Thu, 26 May 2022 13:31:10 -0500
    Ready:          True
    Restart Count:  1
    Limits:
      memory:  170Mi
    Requests:
      cpu:        100m
      memory:     70Mi
    Liveness:     http-get http://:8080/health delay=60s timeout=5s period=10s #success=1 #failure=5
    Readiness:    http-get http://:8181/ready delay=0s timeout=1s period=10s #success=1 #failure=3
    Environment:  <none>
    Mounts:
      /etc/coredns from config-volume (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-swwzf (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  config-volume:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      coredns
    Optional:  false
  kube-api-access-swwzf:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              kubernetes.io/os=linux
Tolerations:                 CriticalAddonsOnly op=Exists
                             node-role.kubernetes.io/control-plane:NoSchedule
                             node-role.kubernetes.io/master:NoSchedule
                             node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:                      <none>


Name:                 etcd-docker-desktop
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Node:                 docker-desktop/192.168.65.4
Start Time:           Thu, 26 May 2022 13:31:19 -0500
Labels:               component=etcd
                      tier=control-plane
Annotations:          kubeadm.kubernetes.io/etcd.advertise-client-urls: https://192.168.65.4:2379
                      kubernetes.io/config.hash: 2449ddc0985e3be8dd23ffc4d12cb53b
                      kubernetes.io/config.mirror: 2449ddc0985e3be8dd23ffc4d12cb53b
                      kubernetes.io/config.seen: 2022-05-25T22:06:27.058705604Z
                      kubernetes.io/config.source: file
                      seccomp.security.alpha.kubernetes.io/pod: runtime/default
Status:               Running
IP:                   192.168.65.4
IPs:
  IP:           192.168.65.4
Controlled By:  Node/docker-desktop
Containers:
  etcd:
    Container ID:  docker://dec9a8f77a592dde47989b6433d5fd6d2297c6a506c807c9d67d34faa88f5006
    Image:         k8s.gcr.io/etcd:3.5.3-0
    Image ID:      docker://sha256:aebe758cef4cd05b9f8cee39758227714d02f42ef3088023c1e3cd454f927a2b
    Port:          <none>
    Host Port:     <none>
    Command:
      etcd
      --advertise-client-urls=https://192.168.65.4:2379
      --cert-file=/run/config/pki/etcd/server.crt
      --client-cert-auth=true
      --data-dir=/var/lib/etcd
      --experimental-initial-corrupt-check=true
      --initial-advertise-peer-urls=https://192.168.65.4:2380
      --initial-cluster=docker-desktop=https://192.168.65.4:2380
      --key-file=/run/config/pki/etcd/server.key
      --listen-client-urls=https://127.0.0.1:2379,https://192.168.65.4:2379
      --listen-metrics-urls=http://127.0.0.1:2381
      --listen-peer-urls=https://192.168.65.4:2380
      --name=docker-desktop
      --peer-cert-file=/run/config/pki/etcd/peer.crt
      --peer-client-cert-auth=true
      --peer-key-file=/run/config/pki/etcd/peer.key
      --peer-trusted-ca-file=/run/config/pki/etcd/ca.crt
      --snapshot-count=10000
      --trusted-ca-file=/run/config/pki/etcd/ca.crt
    State:          Running
      Started:      Thu, 26 May 2022 13:31:20 -0500
    Last State:     Terminated
      Reason:       Error
      Exit Code:    255
      Started:      Wed, 25 May 2022 17:06:28 -0500
      Finished:     Thu, 26 May 2022 13:31:10 -0500
    Ready:          True
    Restart Count:  12
    Requests:
      cpu:        100m
      memory:     100Mi
    Liveness:     http-get http://127.0.0.1:2381/health delay=10s timeout=15s period=10s #success=1 #failure=8
    Startup:      http-get http://127.0.0.1:2381/health delay=10s timeout=15s period=10s #success=1 #failure=24
    Environment:  <none>
    Mounts:
      /run/config/pki/etcd from etcd-certs (rw)
      /var/lib/etcd from etcd-data (rw)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  etcd-certs:
    Type:          HostPath (bare host directory volume)
    Path:          /run/config/pki/etcd
    HostPathType:  DirectoryOrCreate
  etcd-data:
    Type:          HostPath (bare host directory volume)
    Path:          /var/lib/etcd
    HostPathType:  DirectoryOrCreate
QoS Class:         Burstable
Node-Selectors:    <none>
Tolerations:       :NoExecute op=Exists
Events:            <none>


Name:                 kube-apiserver-docker-desktop
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Node:                 docker-desktop/192.168.65.4
Start Time:           Wed, 25 May 2022 17:06:27 -0500
Labels:               component=kube-apiserver
                      tier=control-plane
Annotations:          kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 192.168.65.4:6443
                      kubernetes.io/config.hash: f76ea91a200a6b1cfe31c7a114460aac
                      kubernetes.io/config.mirror: f76ea91a200a6b1cfe31c7a114460aac
                      kubernetes.io/config.seen: 2022-05-25T22:06:27.058720322Z
                      kubernetes.io/config.source: file
                      seccomp.security.alpha.kubernetes.io/pod: runtime/default
Status:               Running
IP:                   192.168.65.4
IPs:
  IP:           192.168.65.4
Controlled By:  Node/docker-desktop
Containers:
  kube-apiserver:
    Container ID:  docker://930896ebb746939bbc5d981f9eda37e19cdb16914472f78fa3d8d8c78b86e115
    Image:         k8s.gcr.io/kube-apiserver:v1.24.0
    Image ID:      docker://sha256:529072250ccc6301cb341cd7359c9641b94a6f837f86f82b1223a59bb0712e64
    Port:          <none>
    Host Port:     <none>
    Command:
      kube-apiserver
      --advertise-address=192.168.65.4
      --allow-privileged=true
      --authorization-mode=Node,RBAC
      --client-ca-file=/run/config/pki/ca.crt
      --enable-admission-plugins=NodeRestriction
      --enable-bootstrap-token-auth=true
      --etcd-cafile=/run/config/pki/etcd/ca.crt
      --etcd-certfile=/run/config/pki/apiserver-etcd-client.crt
      --etcd-keyfile=/run/config/pki/apiserver-etcd-client.key
      --etcd-servers=https://127.0.0.1:2379
      --kubelet-client-certificate=/run/config/pki/apiserver-kubelet-client.crt
      --kubelet-client-key=/run/config/pki/apiserver-kubelet-client.key
      --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
      --proxy-client-cert-file=/run/config/pki/front-proxy-client.crt
      --proxy-client-key-file=/run/config/pki/front-proxy-client.key
      --requestheader-allowed-names=front-proxy-client
      --requestheader-client-ca-file=/run/config/pki/front-proxy-ca.crt
      --requestheader-extra-headers-prefix=X-Remote-Extra-
      --requestheader-group-headers=X-Remote-Group
      --requestheader-username-headers=X-Remote-User
      --secure-port=6443
      --service-account-issuer=https://kubernetes.default.svc.cluster.local
      --service-account-key-file=/run/config/pki/sa.pub
      --service-account-signing-key-file=/run/config/pki/sa.key
      --service-cluster-ip-range=10.96.0.0/12
      --tls-cert-file=/run/config/pki/apiserver.crt
      --tls-private-key-file=/run/config/pki/apiserver.key
      --watch-cache=false
    State:          Running
      Started:      Thu, 26 May 2022 13:31:20 -0500
    Last State:     Terminated
      Reason:       Error
      Exit Code:    255
      Started:      Wed, 25 May 2022 17:06:28 -0500
      Finished:     Thu, 26 May 2022 13:31:10 -0500
    Ready:          True
    Restart Count:  12
    Requests:
      cpu:        250m
    Liveness:     http-get https://192.168.65.4:6443/livez delay=10s timeout=15s period=10s #success=1 #failure=8
    Readiness:    http-get https://192.168.65.4:6443/readyz delay=0s timeout=15s period=1s #success=1 #failure=3
    Startup:      http-get https://192.168.65.4:6443/livez delay=10s timeout=15s period=10s #success=1 #failure=24
    Environment:  <none>
    Mounts:
      /etc/ca-certificates from etc-ca-certificates (ro)
      /etc/ssl/certs from ca-certs (ro)
      /run/config/pki from k8s-certs (ro)
      /usr/local/share/ca-certificates from usr-local-share-ca-certificates (ro)
      /usr/share/ca-certificates from usr-share-ca-certificates (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  ca-certs:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/ssl/certs
    HostPathType:  DirectoryOrCreate
  etc-ca-certificates:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/ca-certificates
    HostPathType:  DirectoryOrCreate
  k8s-certs:
    Type:          HostPath (bare host directory volume)
    Path:          /run/config/pki
    HostPathType:  DirectoryOrCreate
  usr-local-share-ca-certificates:
    Type:          HostPath (bare host directory volume)
    Path:          /usr/local/share/ca-certificates
    HostPathType:  DirectoryOrCreate
  usr-share-ca-certificates:
    Type:          HostPath (bare host directory volume)
    Path:          /usr/share/ca-certificates
    HostPathType:  DirectoryOrCreate
QoS Class:         Burstable
Node-Selectors:    <none>
Tolerations:       :NoExecute op=Exists
Events:            <none>


Name:                 kube-controller-manager-docker-desktop
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Node:                 docker-desktop/192.168.65.4
Start Time:           Thu, 26 May 2022 13:31:19 -0500
Labels:               component=kube-controller-manager
                      tier=control-plane
Annotations:          kubernetes.io/config.hash: d9c6bbd179b0d64e8d303a659acf3a74
                      kubernetes.io/config.mirror: d9c6bbd179b0d64e8d303a659acf3a74
                      kubernetes.io/config.seen: 2022-05-25T22:06:27.058721584Z
                      kubernetes.io/config.source: file
                      seccomp.security.alpha.kubernetes.io/pod: runtime/default
Status:               Running
IP:                   192.168.65.4
IPs:
  IP:           192.168.65.4
Controlled By:  Node/docker-desktop
Containers:
  kube-controller-manager:
    Container ID:  docker://530f8d9cf0e36f31f16eeae31060cb6e8c0c19818a4ddefc693344ecac475f59
    Image:         k8s.gcr.io/kube-controller-manager:v1.24.0
    Image ID:      docker://sha256:88784fb4ac2f696b8fed607f6aa8bd5710544652f4ca166462937a36368f6364
    Port:          <none>
    Host Port:     <none>
    Command:
      kube-controller-manager
      --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
      --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
      --bind-address=127.0.0.1
      --client-ca-file=/run/config/pki/ca.crt
      --cluster-name=kubernetes
      --cluster-signing-cert-file=/run/config/pki/ca.crt
      --cluster-signing-key-file=/run/config/pki/ca.key
      --controllers=*,bootstrapsigner,tokencleaner
      --horizontal-pod-autoscaler-sync-period=60s
      --kubeconfig=/etc/kubernetes/controller-manager.conf
      --leader-elect=false
      --node-monitor-grace-period=180s
      --node-monitor-period=30s
      --pvclaimbinder-sync-period=60s
      --requestheader-client-ca-file=/run/config/pki/front-proxy-ca.crt
      --root-ca-file=/run/config/pki/ca.crt
      --service-account-private-key-file=/run/config/pki/sa.key
      --use-service-account-credentials=true
    State:          Running
      Started:      Thu, 26 May 2022 13:31:20 -0500
    Last State:     Terminated
      Reason:       Error
      Exit Code:    255
      Started:      Wed, 25 May 2022 17:06:28 -0500
      Finished:     Thu, 26 May 2022 13:31:10 -0500
    Ready:          True
    Restart Count:  12
    Requests:
      cpu:        200m
    Liveness:     http-get https://127.0.0.1:10257/healthz delay=10s timeout=15s period=10s #success=1 #failure=8
    Startup:      http-get https://127.0.0.1:10257/healthz delay=10s timeout=15s period=10s #success=1 #failure=24
    Environment:  <none>
    Mounts:
      /etc/ca-certificates from etc-ca-certificates (ro)
      /etc/kubernetes/controller-manager.conf from kubeconfig (ro)
      /etc/ssl/certs from ca-certs (ro)
      /run/config/pki from k8s-certs (ro)
      /usr/libexec/kubernetes/kubelet-plugins/volume/exec from flexvolume-dir (rw)
      /usr/local/share/ca-certificates from usr-local-share-ca-certificates (ro)
      /usr/share/ca-certificates from usr-share-ca-certificates (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  ca-certs:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/ssl/certs
    HostPathType:  DirectoryOrCreate
  etc-ca-certificates:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/ca-certificates
    HostPathType:  DirectoryOrCreate
  flexvolume-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /usr/libexec/kubernetes/kubelet-plugins/volume/exec
    HostPathType:  DirectoryOrCreate
  k8s-certs:
    Type:          HostPath (bare host directory volume)
    Path:          /run/config/pki
    HostPathType:  DirectoryOrCreate
  kubeconfig:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/kubernetes/controller-manager.conf
    HostPathType:  FileOrCreate
  usr-local-share-ca-certificates:
    Type:          HostPath (bare host directory volume)
    Path:          /usr/local/share/ca-certificates
    HostPathType:  DirectoryOrCreate
  usr-share-ca-certificates:
    Type:          HostPath (bare host directory volume)
    Path:          /usr/share/ca-certificates
    HostPathType:  DirectoryOrCreate
QoS Class:         Burstable
Node-Selectors:    <none>
Tolerations:       :NoExecute op=Exists
Events:            <none>


Name:                 kube-proxy-rn8nq
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Node:                 docker-desktop/192.168.65.4
Start Time:           Wed, 25 May 2022 17:06:37 -0500
Labels:               controller-revision-hash=8db7f9b94
                      k8s-app=kube-proxy
                      pod-template-generation=1
Annotations:          <none>
Status:               Running
IP:                   192.168.65.4
IPs:
  IP:           192.168.65.4
Controlled By:  DaemonSet/kube-proxy
Containers:
  kube-proxy:
    Container ID:  docker://18cb00d83a9a7d277f98a3268b7b369f43bd0a96d4c7a47ea83787c28b8c193d
    Image:         k8s.gcr.io/kube-proxy:v1.24.0
    Image ID:      docker://sha256:77b49675beae1d7a23dbd96d367e8ae0fd3318631f270455e0c3e5e771232505
    Port:          <none>
    Host Port:     <none>
    Command:
      /usr/local/bin/kube-proxy
      --config=/var/lib/kube-proxy/config.conf
      --hostname-override=$(NODE_NAME)
    State:          Running
      Started:      Thu, 26 May 2022 13:31:26 -0500
    Last State:     Terminated
      Reason:       Error
      Exit Code:    255
      Started:      Wed, 25 May 2022 17:06:38 -0500
      Finished:     Thu, 26 May 2022 13:31:10 -0500
    Ready:          True
    Restart Count:  1
    Environment:
      NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /lib/modules from lib-modules (ro)
      /run/xtables.lock from xtables-lock (rw)
      /var/lib/kube-proxy from kube-proxy (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-sbjfr (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  kube-proxy:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      kube-proxy
    Optional:  false
  xtables-lock:
    Type:          HostPath (bare host directory volume)
    Path:          /run/xtables.lock
    HostPathType:  FileOrCreate
  lib-modules:
    Type:          HostPath (bare host directory volume)
    Path:          /lib/modules
    HostPathType:
  kube-api-access-sbjfr:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              kubernetes.io/os=linux
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 kube-scheduler-docker-desktop
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Node:                 docker-desktop/192.168.65.4
Start Time:           Thu, 26 May 2022 13:31:19 -0500
Labels:               component=kube-scheduler
                      tier=control-plane
Annotations:          kubernetes.io/config.hash: 1fa929fab6e17047f7779b2ab8125174
                      kubernetes.io/config.mirror: 1fa929fab6e17047f7779b2ab8125174
                      kubernetes.io/config.seen: 2022-05-25T22:06:27.058723608Z
                      kubernetes.io/config.source: file
                      seccomp.security.alpha.kubernetes.io/pod: runtime/default
Status:               Running
IP:                   192.168.65.4
IPs:
  IP:           192.168.65.4
Controlled By:  Node/docker-desktop
Containers:
  kube-scheduler:
    Container ID:  docker://a8c21eaaf93d4178beefe7995d8a8878291ca309f0d2fe24a85848d300e4fa25
    Image:         k8s.gcr.io/kube-scheduler:v1.24.0
    Image ID:      docker://sha256:e3ed7dee73e9341d613017a135d2e8e6f169b16ffdcf0564a67147aef941322d
    Port:          <none>
    Host Port:     <none>
    Command:
      kube-scheduler
      --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
      --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
      --bind-address=127.0.0.1
      --kubeconfig=/etc/kubernetes/scheduler.conf
      --leader-elect=true
    State:          Running
      Started:      Thu, 26 May 2022 13:31:20 -0500
    Last State:     Terminated
      Reason:       Error
      Exit Code:    255
      Started:      Wed, 25 May 2022 17:06:28 -0500
      Finished:     Thu, 26 May 2022 13:31:10 -0500
    Ready:          True
    Restart Count:  12
    Requests:
      cpu:        100m
    Liveness:     http-get https://127.0.0.1:10259/healthz delay=10s timeout=15s period=10s #success=1 #failure=8
    Startup:      http-get https://127.0.0.1:10259/healthz delay=10s timeout=15s period=10s #success=1 #failure=24
    Environment:  <none>
    Mounts:
      /etc/kubernetes/scheduler.conf from kubeconfig (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  kubeconfig:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/kubernetes/scheduler.conf
    HostPathType:  FileOrCreate
QoS Class:         Burstable
Node-Selectors:    <none>
Tolerations:       :NoExecute op=Exists
Events:            <none>


Name:         storage-provisioner
Namespace:    kube-system
Priority:     0
Node:         docker-desktop/192.168.65.4
Start Time:   Wed, 25 May 2022 17:07:07 -0500
Labels:       component=storage-provisioner
Annotations:  <none>
Status:       Running
IP:           10.1.0.61
IPs:
  IP:  10.1.0.61
Containers:
  storage-provisioner:
    Container ID:  docker://6e8139054f12e11be0458d657ded37fa456c373ff0c11e6b8e8a614c93abcbe4
    Image:         docker/desktop-storage-provisioner:v2.0
    Image ID:      docker://sha256:99f89471f4708f1173e688f7f77bf6b995b10355a46cc388b273b0130add7aad
    Port:          <none>
    Host Port:     <none>
    Args:
      /var/lib/k8s-pvs
    State:          Running
      Started:      Thu, 26 May 2022 13:32:02 -0500
    Last State:     Terminated
      Reason:       Error
      Exit Code:    1
      Started:      Thu, 26 May 2022 13:31:28 -0500
      Finished:     Thu, 26 May 2022 13:31:49 -0500
    Ready:          True
    Restart Count:  2
    Environment:    <none>
    Mounts:
      /var/lib/k8s-pvs from pvs (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-r6tdr (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
  kube-api-access-r6tdr:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:                      <none>


Name:         vpnkit-controller
Namespace:    kube-system
Priority:     0
Node:         docker-desktop/192.168.65.4
Start Time:   Wed, 25 May 2022 17:07:07 -0500
Labels:       component=vpnkit-controller
Annotations:  <none>
Status:       Running
IP:           10.1.0.64
IPs:
  IP:  10.1.0.64
Containers:
  vpnkit-controller:
    Container ID:  docker://ccf24ad8cfe2a4356b63c3f857773a2805a1a718dd1e4b151008a6ab9bf95b5d
    Image:         docker/desktop-vpnkit-controller:v2.0
    Image ID:      docker://sha256:8c2c38aa676e97e57b4c8385bbcdcb240a933fafcc5f6cc508d2a3a005b24cb8
    Port:          <none>
    Host Port:     <none>
    Command:
      /kube-vpnkit-forwarder
      -path
      /run/host-services/backend.sock
    State:          Running
      Started:      Thu, 26 May 2022 15:58:57 -0500
    Last State:     Terminated
      Reason:       Error
      Exit Code:    2
      Started:      Thu, 26 May 2022 15:50:40 -0500
      Finished:     Thu, 26 May 2022 15:58:41 -0500
    Ready:          True
    Restart Count:  18
    Environment:    <none>
    Mounts:
      /run/host-services/backend.sock from api (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-kbbtr (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  api:
    Type:          HostPath (bare host directory volume)
    Path:          /run/host-services/backend.sock
    HostPathType:
  kube-api-access-kbbtr:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type     Reason   Age                    From     Message
  ----     ------   ----                   ----     -------
  Warning  BackOff  6m56s (x10 over 153m)  kubelet  Back-off restarting failed container
  Normal   Pulled   6m41s (x14 over 154m)  kubelet  Container image "docker/desktop-vpnkit-controller:v2.0" already present on machine
  Normal   Created  6m41s (x14 over 154m)  kubelet  Created container vpnkit-controller
  Normal   Started  6m41s (x14 over 154m)  kubelet  Started container vpnkit-controller







(base) PS C:\Windows\system32> kubectl get services --sort-by=.metadata.name --all-namespaces
NAMESPACE     NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE
kube-system   kube-dns     ClusterIP   10.96.0.10   <none>        53/UDP,53/TCP,9153/TCP   23h
default       kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP                  23h







(base) PS C:\Windows\system32> kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}' --all-namespaces
error: error executing jsonpath "{.items[*].status.addresses[?(@.type==ExternalIP)].address}": Error executing template: unrecognized identifier ExternalIP. Printing more information for debugging the template:
        template was:
                {.items[*].status.addresses[?(@.type==ExternalIP)].address}
        object given to jsonpath engine was:
                map[string]interface {}{"apiVersion":"v1", "items":[]interface {}{map[string]interface {}{"apiVersion":"v1", "kind":"Node", "metadata":map[string]interface {}{"annotations":map[string]interface {}{"kubeadm.alpha.kubernetes.io/cri-socket":"unix:///var/run/cri-dockerd.sock", "node.alpha.kubernetes.io/ttl":"0", "volumes.kubernetes.io/controller-managed-attach-detach":"true"}, "creationTimestamp":"2022-05-25T22:06:30Z", "labels":map[string]interface {}{"beta.kubernetes.io/arch":"amd64", "beta.kubernetes.io/os":"linux", "kubernetes.io/arch":"amd64", "kubernetes.io/hostname":"docker-desktop", "kubernetes.io/os":"linux", "node-role.kubernetes.io/control-plane":"", "node.kubernetes.io/exclude-from-external-load-balancers":""}, "managedFields":[]interface {}{map[string]interface {}{"apiVersion":"v1", "fieldsType":"FieldsV1", "fieldsV1":map[string]interface {}{"f:metadata":map[string]interface {}{"f:annotations":map[string]interface {}{".":map[string]interface {}{}, "f:volumes.kubernetes.io/controller-managed-attach-detach":map[string]interface {}{}}, "f:labels":map[string]interface {}{".":map[string]interface {}{}, "f:beta.kubernetes.io/arch":map[string]interface {}{}, "f:beta.kubernetes.io/os":map[string]interface {}{}, "f:kubernetes.io/arch":map[string]interface {}{}, "f:kubernetes.io/hostname":map[string]interface {}{}, "f:kubernetes.io/os":map[string]interface {}{}}}}, "manager":"kubelet", "operation":"Update", "time":"2022-05-25T22:06:30Z"}, map[string]interface {}{"apiVersion":"v1", "fieldsType":"FieldsV1", "fieldsV1":map[string]interface {}{"f:metadata":map[string]interface {}{"f:annotations":map[string]interface {}{"f:kubeadm.alpha.kubernetes.io/cri-socket":map[string]interface {}{}}, "f:labels":map[string]interface {}{"f:node-role.kubernetes.io/control-plane":map[string]interface {}{}, "f:node.kubernetes.io/exclude-from-external-load-balancers":map[string]interface {}{}}}}, "manager":"kubeadm", "operation":"Update", "time":"2022-05-25T22:06:33Z"}, map[string]interface {}{"apiVersion":"v1", "fieldsType":"FieldsV1", "fieldsV1":map[string]interface {}{"f:metadata":map[string]interface {}{"f:annotations":map[string]interface {}{"f:node.alpha.kubernetes.io/ttl":map[string]interface {}{}}}}, "manager":"kube-controller-manager", "operation":"Update", "time":"2022-05-25T22:06:37Z"}, map[string]interface {}{"apiVersion":"v1", "fieldsType":"FieldsV1", "fieldsV1":map[string]interface {}{"f:status":map[string]interface {}{"f:conditions":map[string]interface {}{"k:{\"type\":\"DiskPressure\"}":map[string]interface {}{"f:lastHeartbeatTime":map[string]interface {}{}}, "k:{\"type\":\"MemoryPressure\"}":map[string]interface {}{"f:lastHeartbeatTime":map[string]interface {}{}}, "k:{\"type\":\"PIDPressure\"}":map[string]interface {}{"f:lastHeartbeatTime":map[string]interface {}{}}, "k:{\"type\":\"Ready\"}":map[string]interface {}{"f:lastHeartbeatTime":map[string]interface {}{}, "f:lastTransitionTime":map[string]interface {}{}, "f:message":map[string]interface {}{}, "f:reason":map[string]interface {}{}, "f:status":map[string]interface {}{}}}, "f:images":map[string]interface {}{}, "f:nodeInfo":map[string]interface {}{"f:bootID":map[string]interface {}{}}}}, "manager":"kubelet", "operation":"Update", "subresource":"status", "time":"2022-05-26T18:31:23Z"}}, "name":"docker-desktop", "resourceVersion":"16528", "uid":"5d4ed3eb-b957-4919-9d83-4ca3ec667ed5"}, "spec":map[string]interface {}{}, "status":map[string]interface {}{"addresses":[]interface {}{map[string]interface {}{"address":"192.168.65.4", "type":"InternalIP"}, map[string]interface {}{"address":"docker-desktop", "type":"Hostname"}}, "allocatable":map[string]interface {}{"cpu":"24", "ephemeral-storage":"242541353378", "hugepages-1Gi":"0", "hugepages-2Mi":"0", "memory":"52500564Ki", "pods":"110"}, "capacity":map[string]interface {}{"cpu":"24", "ephemeral-storage":"263174212Ki", "hugepages-1Gi":"0", "hugepages-2Mi":"0", "memory":"52602964Ki", "pods":"110"}, "conditions":[]interface {}{map[string]interface {}{"lastHeartbeatTime":"2022-05-26T21:07:31Z", "lastTransitionTime":"2022-05-25T22:06:28Z", "message":"kubelet has sufficient memory available", "reason":"KubeletHasSufficientMemory", "status":"False", "type":"MemoryPressure"}, map[string]interface {}{"lastHeartbeatTime":"2022-05-26T21:07:31Z", "lastTransitionTime":"2022-05-25T22:06:28Z", "message":"kubelet has no disk pressure", "reason":"KubeletHasNoDiskPressure", "status":"False", "type":"DiskPressure"}, map[string]interface {}{"lastHeartbeatTime":"2022-05-26T21:07:31Z", "lastTransitionTime":"2022-05-25T22:06:28Z", "message":"kubelet has sufficient PID available", "reason":"KubeletHasSufficientPID", "status":"False", "type":"PIDPressure"}, map[string]interface {}{"lastHeartbeatTime":"2022-05-26T21:07:31Z", "lastTransitionTime":"2022-05-25T22:07:01Z", "message":"kubelet is posting ready status", "reason":"KubeletReady", "status":"True", "type":"Ready"}}, "daemonEndpoints":map[string]interface {}{"kubeletEndpoint":map[string]interface {}{"Port":10250}}, "images":[]interface {}{map[string]interface {}{"names":[]interface {}{"hubproxy.docker.internal:5000/docker/desktop-kubernetes@sha256:a619c0a2ea733fc19a4a72b8de07308f95f3b9fc625ab79f91cc2321c8bce31f", "hubproxy.docker.internal:5000/docker/desktop-kubernetes:kubernetes-v1.24.0-cni-v0.8.5-critools-v1.17.0-cri-dockerd-v0.2.0-1-debian"}, "sizeBytes":347793380}, map[string]interface {}{"names":[]interface {}{"k8s.gcr.io/etcd:3.5.3-0"}, "sizeBytes":299495233}, map[string]interface {}{"names":[]interface {}{"docker/desktop-kubernetes@sha256:d78aeb4fba8b86c5fc2faec67842cab37b36fde2f21bb75c59db943ca9cc0ee8", "docker/desktop-kubernetes:kubernetes-v1.21.5-cni-v0.8.5-critools-v1.17.0-debian"}, "sizeBytes":290007723}, map[string]interface {}{"names":[]interface {}{"kubernetesui/dashboard@sha256:148991563e374c83b75e8c51bca75f512d4f006ddc791e96a91f1c7420b60bd9", "kubernetesui/dashboard:v2.2.0"}, "sizeBytes":225135791}, map[string]interface {}{"names":[]interface {}{"dockersamples/static-site@sha256:daa686c61d7d239b7977e72157997489db49f316b9b9af3909d9f10fd28b2dec", "dockersamples/static-site:latest"}, "sizeBytes":190521208}, map[string]interface {}{"names":[]interface {}{"k8s.gcr.io/kube-apiserver:v1.24.0"}, "sizeBytes":129706641}, map[string]interface {}{"names":[]interface {}{"k8s.gcr.io/kube-apiserver@sha256:2a88e173873a9870bea873f3907557aefee3fe6887859b648cea06a38fa08227", "k8s.gcr.io/kube-apiserver:v1.21.5"}, "sizeBytes":125850013}, map[string]interface {}{"names":[]interface {}{"k8s.gcr.io/kube-controller-manager@sha256:1c3ae19287a122c4d58b6b7ffb030ea8962edfae798d9986445f85cdc1de1844", "k8s.gcr.io/kube-controller-manager:v1.21.5"}, "sizeBytes":119886835}, map[string]interface {}{"names":[]interface {}{"k8s.gcr.io/kube-controller-manager:v1.24.0"}, "sizeBytes":119352270}, map[string]interface {}{"names":[]interface {}{"k8s.gcr.io/kube-proxy:v1.24.0"}, "sizeBytes":109931885}, map[string]interface {}{"names":[]interface {}{"k8s.gcr.io/kube-proxy@sha256:b9f3f8764f5b74085edbed44202aa83dab3555638ea9de182b9f79b6728bee5b", "k8s.gcr.io/kube-proxy:v1.21.5"}, "sizeBytes":103542696}, map[string]interface {}{"names":[]interface {}{"k8s.gcr.io/metrics-server/metrics-server@sha256:dbc33d7d35d2a9cc5ab402005aa7a0d13be6192f3550c7d42cba8d2d5e3a5d62", "k8s.gcr.io/metrics-server/metrics-server:v0.4.2"}, "sizeBytes":60547543}, map[string]interface {}{"names":[]interface {}{"k8s.gcr.io/kube-scheduler:v1.24.0"}, "sizeBytes":50990002}, map[string]interface {}{"names":[]interface {}{"k8s.gcr.io/kube-scheduler@sha256:af426d1982a88ed5a4facd0cac3d670fee77575ed9d7cf5e98dc7b653f8f8ceb", "k8s.gcr.io/kube-scheduler:v1.21.5"}, "sizeBytes":50848503}, map[string]interface {}{"names":[]interface {}{"k8s.gcr.io/coredns/coredns:v1.8.6"}, "sizeBytes":46829283}, map[string]interface {}{"names":[]interface {}{"docker/desktop-storage-provisioner:v2.0"}, "sizeBytes":41850220}, map[string]interface {}{"names":[]interface {}{"kubernetesui/metrics-scraper@sha256:1f977343873ed0e2efd4916a6b2f3075f310ff6fe42ee098f54fc58aa7a28ab7", "kubernetesui/metrics-scraper:v1.0.6"}, "sizeBytes":34548789}, map[string]interface {}{"names":[]interface {}{"docker/getting-started@sha256:b558be874169471bd4e65bd6eac8c303b271a7ee8553ba47481b73b2bf597aae", "docker/getting-started:latest"}, "sizeBytes":28784664}, map[string]interface {}{"names":[]interface {}{"tabresee/docker101tutorial@sha256:b5b4539f655a479a141976c20a258060fc0a32dfb0bc7a0dd015bd2b6a853dd7", "docker101tutorial:latest", "tabresee/docker101tutorial:latest"}, "sizeBytes":27941754}, map[string]interface {}{"names":[]interface {}{"docker/getting-started@sha256:9156d395e7e41498d5348e95513d61fc7929db720393448306c5d7263d7f2696", "docker/getting-started:pwd"}, "sizeBytes":25815131}, map[string]interface {}{"names":[]interface {}{"alpine/git@sha256:1eb7b41cd5226ebe64d1636c4183fe3ddc60249960c48fbe9cde61ea044db18e", "alpine/git:latest"}, "sizeBytes":25082865}, map[string]interface {}{"names":[]interface {}{"gcr.io/kuar-demo/kuard-amd64@sha256:1ecc9fb2c871302fdb57a25e0c076311b7b352b0a9246d442940ca8fb4efe229", "gcr.io/kuar-demo/kuard-amd64:blue"}, "sizeBytes":22954558}, map[string]interface {}{"names":[]interface {}{"docker/desktop-vpnkit-controller:v2.0"}, "sizeBytes":21034536}, map[string]interface {}{"names":[]interface {}{"alpine@sha256:686d8c9dfa6f3ccfc8230bc3178d23f84eeaf7e457f36f271ab1acc53015037c", "alpine:latest"}, "sizeBytes":5529096}, map[string]interface {}{"names":[]interface {}{"k8s.gcr.io/pause:3.7"}, "sizeBytes":711184}, map[string]interface {}{"names":[]interface {}{"k8s.gcr.io/pause@sha256:6c3835cab3980f11b83277305d0d736051c32b17606f5ec59f1dda67c9ba3810", "k8s.gcr.io/pause:3.4.1"}, "sizeBytes":682696}}, "nodeInfo":map[string]interface {}{"architecture":"amd64", "bootID":"91ce0876-cdcc-46f8-9898-8c9c0c68194a", "containerRuntimeVersion":"docker://20.10.14", "kernelVersion":"5.10.16.3-microsoft-standard-WSL2", "kubeProxyVersion":"v1.24.0", "kubeletVersion":"v1.24.0", "machineID":"27bb5c95-c4b7-438c-bed1-ed90bac37fb7", "operatingSystem":"linux", "osImage":"Docker Desktop", "systemUUID":"27bb5c95-c4b7-438c-bed1-ed90bac37fb7"}}}}, "kind":"List", "metadata":map[string]interface {}{"resourceVersion":""}}


(base) PS C:\Windows\system32>







(base) PS C:\Windows\system32> kubectl get pods -n kube-system
NAME                                     READY   STATUS    RESTARTS         AGE
coredns-6d4b75cb6d-7lrqq                 1/1     Running   1 (164m ago)     23h
coredns-6d4b75cb6d-hwrst                 1/1     Running   1 (164m ago)     23h
etcd-docker-desktop                      1/1     Running   12 (164m ago)    23h
kube-apiserver-docker-desktop            1/1     Running   12 (164m ago)    23h
kube-controller-manager-docker-desktop   1/1     Running   12 (164m ago)    23h
kube-proxy-rn8nq                         1/1     Running   1 (164m ago)     23h
kube-scheduler-docker-desktop            1/1     Running   12 (164m ago)    23h
storage-provisioner                      1/1     Running   2 (163m ago)     23h
vpnkit-controller                        1/1     Running   19 (8m42s ago)   23h
(base) PS C:\Windows\system32> kubectl logs kube-apiserver-docker-desktop
Error from server (NotFound): pods "kube-apiserver-docker-desktop" not found
(base) PS C:\Windows\system32> kubectl logs kube-apiserver-docker-desktop -n kube-system
I0526 18:31:20.695772       1 server.go:558] external host was not specified, using 192.168.65.4
I0526 18:31:20.696972       1 server.go:158] Version: v1.24.0
I0526 18:31:20.697017       1 server.go:160] "Golang settings" GOGC="" GOMAXPROCS="" GOTRACEBACK=""
I0526 18:31:21.016167       1 shared_informer.go:255] Waiting for caches to sync for node_authorizer
I0526 18:31:21.019360       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I0526 18:31:21.019392       1 plugins.go:161] Loaded 11 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,PodSecurity,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
I0526 18:31:21.020720       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I0526 18:31:21.020759       1 plugins.go:161] Loaded 11 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,PodSecurity,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
W0526 18:31:21.864522       1 genericapiserver.go:557] Skipping API apiextensions.k8s.io/v1beta1 because it has no resources.







(base) PS C:\Windows\system32> kubectl api-resources -o name
bindings
componentstatuses
configmaps
endpoints
events
limitranges
namespaces
nodes
persistentvolumeclaims
persistentvolumes
pods
podtemplates
replicationcontrollers
resourcequotas
secrets
serviceaccounts
services
mutatingwebhookconfigurations.admissionregistration.k8s.io
validatingwebhookconfigurations.admissionregistration.k8s.io
customresourcedefinitions.apiextensions.k8s.io
apiservices.apiregistration.k8s.io
controllerrevisions.apps
daemonsets.apps
deployments.apps
replicasets.apps
statefulsets.apps
tokenreviews.authentication.k8s.io
localsubjectaccessreviews.authorization.k8s.io
selfsubjectaccessreviews.authorization.k8s.io
selfsubjectrulesreviews.authorization.k8s.io
subjectaccessreviews.authorization.k8s.io
horizontalpodautoscalers.autoscaling
cronjobs.batch
jobs.batch
certificatesigningrequests.certificates.k8s.io
leases.coordination.k8s.io
endpointslices.discovery.k8s.io
events.events.k8s.io
flowschemas.flowcontrol.apiserver.k8s.io
prioritylevelconfigurations.flowcontrol.apiserver.k8s.io
ingressclasses.networking.k8s.io
ingresses.networking.k8s.io
networkpolicies.networking.k8s.io
runtimeclasses.node.k8s.io
poddisruptionbudgets.policy
podsecuritypolicies.policy
clusterrolebindings.rbac.authorization.k8s.io
clusterroles.rbac.authorization.k8s.io
rolebindings.rbac.authorization.k8s.io
roles.rbac.authorization.k8s.io
priorityclasses.scheduling.k8s.io
csidrivers.storage.k8s.io
csinodes.storage.k8s.io
csistoragecapacities.storage.k8s.io
storageclasses.storage.k8s.io
volumeattachments.storage.k8s.io







(base) PS C:\Windows\system32> kubectl api-resources -o wide
NAME                              SHORTNAMES   APIVERSION                             NAMESPACED   KIND                             VERBS
bindings                                       v1                                     true         Binding                          [create]
componentstatuses                 cs           v1                                     false        ComponentStatus                  [get list]
configmaps                        cm           v1                                     true         ConfigMap                        [create delete deletecollection get list patch update watch]
endpoints                         ep           v1                                     true         Endpoints                        [create delete deletecollection get list patch update watch]
events                            ev           v1                                     true         Event                            [create delete deletecollection get list patch update watch]
limitranges                       limits       v1                                     true         LimitRange                       [create delete deletecollection get list patch update watch]
namespaces                        ns           v1                                     false        Namespace                        [create delete get list patch update watch]
nodes                             no           v1                                     false        Node                             [create delete deletecollection get list patch update watch]
persistentvolumeclaims            pvc          v1                                     true         PersistentVolumeClaim            [create delete deletecollection get list patch update watch]
persistentvolumes                 pv           v1                                     false        PersistentVolume                 [create delete deletecollection get list patch update watch]
pods                              po           v1                                     true         Pod                              [create delete deletecollection get list patch update watch]
podtemplates                                   v1                                     true         PodTemplate                      [create delete deletecollection get list patch update watch]
replicationcontrollers            rc           v1                                     true         ReplicationController            [create delete deletecollection get list patch update watch]
resourcequotas                    quota        v1                                     true         ResourceQuota                    [create delete deletecollection get list patch update watch]
secrets                                        v1                                     true         Secret                           [create delete deletecollection get list patch update watch]
serviceaccounts                   sa           v1                                     true         ServiceAccount                   [create delete deletecollection get list patch update watch]
services                          svc          v1                                     true         Service                          [create delete deletecollection get list patch update watch]
mutatingwebhookconfigurations                  admissionregistration.k8s.io/v1        false        MutatingWebhookConfiguration     [create delete deletecollection get list patch update watch]
validatingwebhookconfigurations                admissionregistration.k8s.io/v1        false        ValidatingWebhookConfiguration   [create delete deletecollection get list patch update watch]
customresourcedefinitions         crd,crds     apiextensions.k8s.io/v1                false        CustomResourceDefinition         [create delete deletecollection get list patch update watch]
apiservices                                    apiregistration.k8s.io/v1              false        APIService                       [create delete deletecollection get list patch update watch]
controllerrevisions                            apps/v1                                true         ControllerRevision               [create delete deletecollection get list patch update watch]
daemonsets                        ds           apps/v1                                true         DaemonSet                        [create delete deletecollection get list patch update watch]
deployments                       deploy       apps/v1                                true         Deployment                       [create delete deletecollection get list patch update watch]
replicasets                       rs           apps/v1                                true         ReplicaSet                       [create delete deletecollection get list patch update watch]
statefulsets                      sts          apps/v1                                true         StatefulSet                      [create delete deletecollection get list patch update watch]
tokenreviews                                   authentication.k8s.io/v1               false        TokenReview                      [create]
localsubjectaccessreviews                      authorization.k8s.io/v1                true         LocalSubjectAccessReview         [create]
selfsubjectaccessreviews                       authorization.k8s.io/v1                false        SelfSubjectAccessReview          [create]
selfsubjectrulesreviews                        authorization.k8s.io/v1                false        SelfSubjectRulesReview           [create]
subjectaccessreviews                           authorization.k8s.io/v1                false        SubjectAccessReview              [create]
horizontalpodautoscalers          hpa          autoscaling/v2                         true         HorizontalPodAutoscaler          [create delete deletecollection get list patch update watch]
cronjobs                          cj           batch/v1                               true         CronJob                          [create delete deletecollection get list patch update watch]
jobs                                           batch/v1                               true         Job                              [create delete deletecollection get list patch update watch]
certificatesigningrequests        csr          certificates.k8s.io/v1                 false        CertificateSigningRequest        [create delete deletecollection get list patch update watch]
leases                                         coordination.k8s.io/v1                 true         Lease                            [create delete deletecollection get list patch update watch]
endpointslices                                 discovery.k8s.io/v1                    true         EndpointSlice                    [create delete deletecollection get list patch update watch]
events                            ev           events.k8s.io/v1                       true         Event                            [create delete deletecollection get list patch update watch]
flowschemas                                    flowcontrol.apiserver.k8s.io/v1beta2   false        FlowSchema                       [create delete deletecollection get list patch update watch]
prioritylevelconfigurations                    flowcontrol.apiserver.k8s.io/v1beta2   false        PriorityLevelConfiguration       [create delete deletecollection get list patch update watch]
ingressclasses                                 networking.k8s.io/v1                   false        IngressClass                     [create delete deletecollection get list patch update watch]
ingresses                         ing          networking.k8s.io/v1                   true         Ingress                          [create delete deletecollection get list patch update watch]
networkpolicies                   netpol       networking.k8s.io/v1                   true         NetworkPolicy                    [create delete deletecollection get list patch update watch]
runtimeclasses                                 node.k8s.io/v1                         false        RuntimeClass                     [create delete deletecollection get list patch update watch]
poddisruptionbudgets              pdb          policy/v1                              true         PodDisruptionBudget              [create delete deletecollection get list patch update watch]
podsecuritypolicies               psp          policy/v1beta1                         false        PodSecurityPolicy                [create delete deletecollection get list patch update watch]
clusterrolebindings                            rbac.authorization.k8s.io/v1           false        ClusterRoleBinding               [create delete deletecollection get list patch update watch]
clusterroles                                   rbac.authorization.k8s.io/v1           false        ClusterRole                      [create delete deletecollection get list patch update watch]
rolebindings                                   rbac.authorization.k8s.io/v1           true         RoleBinding                      [create delete deletecollection get list patch update watch]
roles                                          rbac.authorization.k8s.io/v1           true         Role                             [create delete deletecollection get list patch update watch]
priorityclasses                   pc           scheduling.k8s.io/v1                   false        PriorityClass                    [create delete deletecollection get list patch update watch]
csidrivers                                     storage.k8s.io/v1                      false        CSIDriver                        [create delete deletecollection get list patch update watch]
csinodes                                       storage.k8s.io/v1                      false        CSINode                          [create delete deletecollection get list patch update watch]
csistoragecapacities                           storage.k8s.io/v1                      true         CSIStorageCapacity               [create delete deletecollection get list patch update watch]
storageclasses                    sc           storage.k8s.io/v1                      false        StorageClass                     [create delete deletecollection get list patch update watch]
volumeattachments                              storage.k8s.io/v1                      false        VolumeAttachment                 [create delete deletecollection get list patch update watch]





# All images running in a cluster

(base) PS C:\Windows\system32> kubectl get pods -A -o=custom-columns='DATA:spec.containers[*].image'
DATA
gcr.io/kuar-demo/kuard-amd64:blue
k8s.gcr.io/coredns/coredns:v1.8.6
k8s.gcr.io/coredns/coredns:v1.8.6
k8s.gcr.io/etcd:3.5.3-0
k8s.gcr.io/kube-apiserver:v1.24.0
k8s.gcr.io/kube-controller-manager:v1.24.0
k8s.gcr.io/kube-proxy:v1.24.0
k8s.gcr.io/kube-scheduler:v1.24.0
docker/desktop-storage-provisioner:v2.0
docker/desktop-vpnkit-controller:v2.0





