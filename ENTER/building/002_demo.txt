


this is technically module 3

https://kubernetes.io/docs/tutorials/kubernetes-basics/explore/explore-intro/




Viewing Pods and Nodes

Kubernetes Pods

When you created a Deployment in Module 2, Kubernetes created a Pod to host your application instance.



YOU CREATED A DEPLOYMENT, BUT IT ON ITS DOWN CREATED A POD TO HOST THIS APPLICATION INSTANCE. 



A Pod is a Kubernetes abstraction that represents a group of one or more application containers (such as Docker), and some shared resources for those containers. 

Those resources include:

   Shared storage, as Volumes
  
   Networking, as a unique cluster IP address     PODS HAVE IP ADDRESSES. 

   Information about how to run each container, such as the container image version or specific ports to use



A Pod is a group of one or more application containers (such as Docker) and includes shared storage (volumes), 
IP address and information about how to run them.



A Pod models an application-specific "logical host" and can contain different application containers which are relatively tightly coupled. 

For example, a Pod might include both the container with your Node.js app as well as a different container that feeds the data to be published by the Node.js webserver. 

The containers in a Pod share an IP Address and port space (I FIND THAT ODD), are always co-located and co-scheduled, and run in a shared context on the same Node.

Pods are the atomic unit on the Kubernetes platform. 


When we create a Deployment on Kubernetes, that Deployment creates Pods with containers inside them 
(as opposed to creating containers directly).

Each Pod is tied to the Node where it is scheduled, and remains there until termination (according to restart policy)
or deletion. In case of a Node failure, identical Pods are scheduled on other available Nodes in the cluster.




Containers should only be scheduled together in a single Pod if they are tightly coupled and need to share resources such as disk.








--- Nodes ---


A Pod always runs on a Node. A Node is a worker machine in Kubernetes and may be either a virtual or a physical machine, 
depending on the cluster. 


(base) PS C:\Windows\system32> kubectl get nodes
NAME             STATUS   ROLES           AGE   VERSION
docker-desktop   Ready    control-plane   43h   v1.24.0


Each Node is managed by the control plane. 

A Node can have multiple pods, and the Kubernetes control plane automatically handles scheduling the pods across the Nodes in the cluster. 

The control plane's automatic scheduling takes into account the available resources on each Node.



Every Kubernetes Node runs at least:

   Kubelet, a process responsible for communication between the Kubernetes control plane and the Node; it manages the Pods and the containers running on a machine.
  
   A container runtime (like Docker) responsible for pulling the container image from a registry, unpacking the container, and running the application.





Troubleshooting with kubectl

The most common operations can be done with the following kubectl commands:

kubectl get - list resources
kubectl describe - show detailed information about a resource
kubectl logs - print the logs from a container in a pod
kubectl exec - execute a command on a container in a pod
You can use these commands to see when applications were deployed, what their current statuses are, where they are running and what their configurations are.


(base) PS C:\Windows\system32> kubectl get nodes --all-namespaces
NAME             STATUS   ROLES           AGE   VERSION
docker-desktop   Ready    control-plane   44h   v1.24.0





Is the application running ? 

(base) PS C:\Windows\system32> kubectl get pods --all-namespaces
NAMESPACE              NAME                                         READY   STATUS    RESTARTS         AGE
default                kubernetes-bootcamp-d9b4bdd78-s89xj          1/1     Running   0                35m           <-----------------------------
kube-system            coredns-6d4b75cb6d-7lrqq                     1/1     Running   2 (3h59m ago)    44h
kube-system            coredns-6d4b75cb6d-hwrst                     1/1     Running   2 (3h59m ago)    44h
kube-system            etcd-docker-desktop                          1/1     Running   13 (3h59m ago)   44h
kube-system            kube-apiserver-docker-desktop                1/1     Running   13 (3h59m ago)   44h
kube-system            kube-controller-manager-docker-desktop       1/1     Running   13 (3h59m ago)   44h
kube-system            kube-proxy-rn8nq                             1/1     Running   2 (3h59m ago)    44h
kube-system            kube-scheduler-docker-desktop                1/1     Running   13 (3h59m ago)   44h
kube-system            storage-provisioner                          1/1     Running   4 (3h59m ago)    44h
kube-system            vpnkit-controller                            1/1     Running   45 (5m38s ago)   44h
kubernetes-dashboard   dashboard-metrics-scraper-65d858c58b-zlbdg   1/1     Running   1 (3h59m ago)    20h
kubernetes-dashboard   kubernetes-dashboard-5c6ff5c64d-vjc5r        1/1     Running   2 (3h59m ago)    20h









> kubectl describe pods kubernetes-bootcamp-d9b4bdd78-s89xj

Name:         kubernetes-bootcamp-d9b4bdd78-s89xj

Namespace:    default

Priority:     0

Node:         docker-desktop/192.168.65.4

Start Time:   Fri, 27 May 2022 12:32:34 -0500

Labels:       app=kubernetes-bootcamp
              pod-template-hash=d9b4bdd78

Annotations:  <none>

Status:       Running


IP:           10.1.0.73

IPs:
  IP:           10.1.0.73

Controlled By:  ReplicaSet/kubernetes-bootcamp-d9b4bdd78


	(base) PS C:\Windows\system32> kubectl get replicasets
	NAME                            DESIRED   CURRENT   READY   AGE
	kubernetes-bootcamp-d9b4bdd78   1         1         1       38m


Containers:
  kubernetes-bootcamp:
    Container ID:   docker://0ea257e719d2749970bedf250910cd0cbcc289118f04edd992c9d13403aadf18
    Image:          gcr.io/google-samples/kubernetes-bootcamp:v1
    Image ID:       docker-pullable://gcr.io/google-samples/kubernetes-bootcamp@sha256:0d6b8ee63bb57c5f5b6156f446b3bc3b3c143d233037f3a2f00e279c8fcc64af
    Port:           <none>
    Host Port:      <none>
    State:          Running
      Started:      Fri, 27 May 2022 12:32:44 -0500
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-bfbx2 (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  kube-api-access-bfbx2:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type    Reason     Age   From               Message
  ----    ------     ----  ----               -------
  Normal  Scheduled  36m   default-scheduler  Successfully assigned default/kubernetes-bootcamp-d9b4bdd78-s89xj to docker-desktop
  Normal  Pulling    36m   kubelet            Pulling image "gcr.io/google-samples/kubernetes-bootcamp:v1"
  Normal  Pulled     36m   kubelet            Successfully pulled image "gcr.io/google-samples/kubernetes-bootcamp:v1" in 8.731381156s
  Normal  Created    36m   kubelet            Created container kubernetes-bootcamp
  Normal  Started    36m   kubelet            Started container kubernetes-bootcamp



We see here details about the Pod’s container: IP address, the ports used and a list of events related to the lifecycle of the Pod.

The output of the describe command is extensive and covers some concepts that we didn’t explain yet, but don’t worry, they will become familiar by the end of this bootcamp.

Note: the describe command can be used to get detailed information about most of the kubernetes primitives: node, pods, deployments. The describe output is designed to be human readable, not to be scripted against.




(base) PS C:\Windows\system32> kubectl get replicasets
NAME                            DESIRED   CURRENT   READY   AGE
kubernetes-bootcamp-d9b4bdd78   1         1         1       40m



> kubectl describe replicasets

Name:           kubernetes-bootcamp-d9b4bdd78

Namespace:      default

Selector:       app=kubernetes-bootcamp,pod-template-hash=d9b4bdd78

Labels:         app=kubernetes-bootcamp
                pod-template-hash=d9b4bdd78

Annotations:    deployment.kubernetes.io/desired-replicas: 1
                deployment.kubernetes.io/max-replicas: 2
                deployment.kubernetes.io/revision: 1

Controlled By:  Deployment/kubernetes-bootcamp

Replicas:       1 current / 1 desired

Pods Status:    1 Running / 0 Waiting / 0 Succeeded / 0 Failed

Pod Template:
  Labels:  app=kubernetes-bootcamp
           pod-template-hash=d9b4bdd78
  Containers:
   kubernetes-bootcamp:
    Image:        gcr.io/google-samples/kubernetes-bootcamp:v1
    Port:         <none>
    Host Port:    <none>
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>

Events:
  Type    Reason            Age   From                   Message
  ----    ------            ----  ----                   -------
  Normal  SuccessfulCreate  40m   replicaset-controller  Created pod: kubernetes-bootcamp-d9b4bdd78-s89xj





Step 2 Show the app in the terminal

Recall that Pods are running in an isolated, private network - so we need to proxy access to them so we can debug and interact with them. 

To do this, we'll use the kubectl proxy command to run a proxy in a second terminal window.

 Click on the command below to automatically open a new terminal and run the proxy:




Now again, we'll get the Pod name and query that pod directly through the proxy. To get the Pod name and store it in the POD_NAME environment variable:



curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/

curl http://localhost:8001/api/v1/namespaces/default/pods/kubernetes-bootcamp-d9b4bdd78-s89xj/proxy/

kubernetes-bootcamp-d9b4bdd78-s89xj



Now again, we'll get the Pod name and query that pod directly through the proxy. To get the Pod name and store it in the POD_NAME environment variable:



curl http://localhost:8001/api/v1/namespaces/default/pods/kubernetes-bootcamp-d9b4bdd78-s89xj/proxy/   did use the /proxy/ though...




> curl http://localhost:8001/api/v1/namespaces/default/pods/kubernetes-bootcamp-d9b4bdd78-s89xj


StatusCode        : 200

StatusDescription : OK

Content           : {
                      "kind": "Pod",
                      "apiVersion": "v1",
                      "metadata": {
                        "name": "kubernetes-bootcamp-d9b4bdd78-s89xj",
                        "generateName": "kubernetes-bootcamp-d9b4bdd78-",
                        "namespace": "default",
                        "uid":...

RawContent        : HTTP/1.1 200 OK
                    Audit-Id: 0f0e52d4-0d19-489f-9537-18063ea23cc7
                    X-Kubernetes-Pf-Flowschema-Uid: c87a5348-a667-4d38-8292-600904d3ad2d
                    X-Kubernetes-Pf-Prioritylevel-Uid: 001b69a2-0c2e-491d-8389-7fd4b1...
Forms             : {}
Headers           : {[Audit-Id, 0f0e52d4-0d19-489f-9537-18063ea23cc7], [X-Kubernetes-Pf-Flowschema-Uid, c87a5348-a667-4d38-8292-600904d3ad2d], [X-Kubernetes-Pf-Prioritylevel-Uid, 001b69a2-0c2e-491d-8389-7fd4b1ad7da6],
                    [Transfer-Encoding, chunked]...}
Images            : {}
InputFields       : {}
Links             : {}
ParsedHtml        : mshtml.HTMLDocumentClass
RawContentLength  : 7042



The url is the route to the API of the Pod.



Step 3 View the container logs
Anything that the application would normally send to STDOUT becomes logs for the container within the Pod. We can retrieve these logs using the kubectl logs command:

kubectl logs $POD_NAME

Note: We don’t need to specify the container name, because we only have one container inside the pod.


Note: We don’t need to specify the container name, because we only have one container inside the pod.






(base) PS C:\Windows\system32> kubectl logs kubernetes-bootcamp-d9b4bdd78-s89xj
Kubernetes Bootcamp App Started At: 2022-05-27T17:32:45.008Z | Running On:  kubernetes-bootcamp-d9b4bdd78-s89xj



Step 4 Executing command on the container

We can execute commands directly on the container once the Pod is up and running. 

For this, we use the exec command and use the name of the Pod as a parameter. 

Let’s list the environment variables:





this is a big deal

(base) PS C:\Windows\system32> kubectl exec kubernetes-bootcamp-d9b4bdd78-s89xj -- env
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
HOSTNAME=kubernetes-bootcamp-d9b4bdd78-s89xj
KUBERNETES_PORT_443_TCP_PROTO=tcp
KUBERNETES_PORT_443_TCP_PORT=443
KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1
KUBERNETES_SERVICE_HOST=10.96.0.1
KUBERNETES_SERVICE_PORT=443
KUBERNETES_SERVICE_PORT_HTTPS=443
KUBERNETES_PORT=tcp://10.96.0.1:443
KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443
NPM_CONFIG_LOGLEVEL=info
NODE_VERSION=6.3.1
HOME=/root


Executing command on the container
We can execute commands directly on the container once the Pod is up and running. For this, we use the exec command and use the name of the Pod as a parameter. Let’s list the environment variables:


Next let’s start a bash session in the Pod’s container:



(base) PS C:\Windows\system32> kubectl exec -ti kubernetes-bootcamp-d9b4bdd78-s89xj -- bash
root@kubernetes-bootcamp-d9b4bdd78-s89xj:/#


big big deal ! 





We have now an open console on the container where we run our NodeJS application. 

The source code of the app is in the server.js file:


root@kubernetes-bootcamp-d9b4bdd78-s89xj:/# cat server.js
var http = require('http');
var requests=0;
var podname= process.env.HOSTNAME;
var startTime;
var host;
var handleRequest = function(request, response) {
  response.setHeader('Content-Type', 'text/plain');
  response.writeHead(200);
  response.write("Hello Kubernetes bootcamp! | Running on: ");
  response.write(host);
  response.end(" | v=1\n");
  console.log("Running On:" ,host, "| Total Requests:", ++requests,"| App Uptime:", (new Date() - startTime)/1000 , "seconds", "| Log Time:",new Date());
}
var www = http.createServer(handleRequest);
www.listen(8080,function () {
    startTime = new Date();;
    host = process.env.HOSTNAME;
    console.log ("Kubernetes Bootcamp App Started At:",startTime, "| Running On: " ,host, "\n" );
});






You can check that the application is up by running a curl command:



root@kubernetes-bootcamp-d9b4bdd78-s89xj:/# curl localhost:8080
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-d9b4bdd78-s89xj | v=1


Note: here we used localhost because we executed the command inside the NodeJS Pod. If you cannot connect to localhost:8080, check to make sure you have run the kubectl exec command and are launching the command from within the Pod


