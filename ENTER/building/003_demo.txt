


--- Using a Service to Expose Your App ---


Overview of Kubernetes Services: 


Kubernetes Pods are mortal. Pods in fact have a lifecycle. When a worker node dies, the Pods running on the Node are also lost. 

A ReplicaSet might then dynamically drive the cluster back to desired state via creation of new Pods to keep your application running. 

As another example, consider an image-processing backend with 3 replicas. 

Those replicas are exchangeable; the front-end system should not care about backend replicas or even if a Pod is lost and recreated. 

That said, each Pod in a Kubernetes cluster has a unique IP address, even Pods on the same Node, 
so there needs to be a way of automatically reconciling changes among Pods so that your applications continue to function.

	each pod has a unique IP address


A Service in Kubernetes is an abstraction which defines a logical set of Pods and a policy by which to access them. 

Services enable a loose coupling between dependent Pods. A Service is defined using YAML (preferred) or JSON, 
like all Kubernetes objects. 

The set of Pods targeted by a Service is usually determined by a LabelSelector 
(see below for why you might want a Service without including selector in the spec).

Although each Pod has a unique IP address, those IPs are not exposed outside the cluster without a Service. 
Services allow your applications to receive traffic. 


Services can be exposed in different ways by specifying a type in the ServiceSpec:

  ClusterIP (default) - Exposes the Service on an internal IP in the cluster. 
                        This type makes the Service only reachable from within the cluster.

  NodePort - Exposes the Service on the same port of each selected Node in the cluster using NAT. 
             Makes a Service accessible from outside the cluster using <NodeIP>:<NodePort>. Superset of ClusterIP.

  LoadBalancer - Creates an external load balancer in the current cloud (if supported) and assigns a fixed, external IP to the Service. Superset of NodePort.

  ExternalName - Maps the Service to the contents of the externalName field (e.g. foo.bar.example.com), by returning a CNAME record with its value. No proxying of any kind is set up. This type requires v1.7 or higher of kube-dns, or CoreDNS version 0.0.8 or higher.

More information about the different types of Services can be found in the Using Source IP tutorial. Also see Connecting Applications with Services.

Additionally, note that there are some use cases with Services that involve not defining selector in the spec. A Service created without selector will also not create the corresponding Endpoints object. This allows users to manually map a Service to specific endpoints. Another possibility why there may be no selector is you are strictly using type: ExternalName.

https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/




More information about the different types of Services can be found in the Using Source IP tutorial. Also see Connecting Applications with Services.

Additionally, note that there are some use cases with Services that involve not defining selector in the spec. A Service created without selector will also not create the corresponding Endpoints object. This allows users to manually map a Service to specific endpoints. Another possibility why there may be no selector is you are strictly using type: ExternalName.



~~~~~~~~~~~~~~~~~~~~~~~~~~~


Services and Labels

A Service routes traffic across a set of Pods. 

Services are the abstraction that allow pods to die and replicate in Kubernetes without impacting your application. 

Discovery and routing among dependent Pods (such as the frontend and backend components in an application) is handled by Kubernetes Services.

Services match a set of Pods using labels and selectors, a grouping primitive that allows logical operation on objects in Kubernetes. 

Labels are key/value pairs attached to objects and can be used in any number of ways:

   Designate objects for development, test, and production

   Embed version tags
  
   Classify an object using tags




Labels can be attached to objects at creation time or later on. 

They can be modified at any time. 

Let's expose our application now using a Service and apply some labels.








(base) PS C:\Windows\system32> kubectl get services
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   44h






We have a Service called kubernetes that is created by default when minikube starts the cluster. 

To create a new service and expose it to external traffic weâ€™ll use the expose command with NodePort as parameter (minikube does not support the LoadBalancer option yet).





So within deployment, i have a deployment called the bootcamp:

(base) PS C:\Windows\system32> kubectl get deployment
NAME                  READY   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   1/1     1            1           80m




(base) PS C:\Windows\system32> kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080
service/kubernetes-bootcamp exposed




(base) PS C:\Windows\system32> kubectl get services
NAME                  TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
kubernetes            ClusterIP   10.96.0.1        <none>        443/TCP          44h
kubernetes-bootcamp   NodePort    10.108.145.222   <none>        8080:31703/TCP   58s    < - - - new ! 



We have now a running Service called kubernetes-bootcamp. 

Here we see that the Service received a unique cluster-IP (10.108.145.222), an internal port and an external-IP (the IP of the Node).




(base) PS C:\Windows\system32> kubectl get no
NAME             STATUS   ROLES           AGE   VERSION
docker-desktop   Ready    control-plane   44h   v1.24.0





(base) PS C:\Windows\system32> kubectl describe no

Name:               docker-desktop

Roles:              control-plane

Labels:             beta.kubernetes.io/arch=amd64
                    beta.kubernetes.io/os=linux
                    kubernetes.io/arch=amd64
                    kubernetes.io/hostname=docker-desktop
                    kubernetes.io/os=linux
                    node-role.kubernetes.io/control-plane=
                    node.kubernetes.io/exclude-from-external-load-balancers=

Annotations:        kubeadm.alpha.kubernetes.io/cri-socket: unix:///var/run/cri-dockerd.sock
                    node.alpha.kubernetes.io/ttl: 0
                    volumes.kubernetes.io/controller-managed-attach-detach: true

CreationTimestamp:  Wed, 25 May 2022 17:06:30 -0500

Taints:             <none>

Unschedulable:      false

Lease:
  HolderIdentity:  docker-desktop
  AcquireTime:     <unset>
  RenewTime:       Fri, 27 May 2022 13:54:34 -0500

Conditions:
  Type             Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message
  ----             ------  -----------------                 ------------------                ------                       -------
  MemoryPressure   False   Fri, 27 May 2022 13:54:35 -0500   Wed, 25 May 2022 17:06:28 -0500   KubeletHasSufficientMemory   kubelet has sufficient memory available
  DiskPressure     False   Fri, 27 May 2022 13:54:35 -0500   Wed, 25 May 2022 17:06:28 -0500   KubeletHasNoDiskPressure     kubelet has no disk pressure
  PIDPressure      False   Fri, 27 May 2022 13:54:35 -0500   Wed, 25 May 2022 17:06:28 -0500   KubeletHasSufficientPID      kubelet has sufficient PID available
  Ready            True    Fri, 27 May 2022 13:54:35 -0500   Wed, 25 May 2022 17:07:01 -0500   KubeletReady                 kubelet is posting ready status

Addresses:
  InternalIP:  192.168.65.4
  Hostname:    docker-desktop

Capacity:
  cpu:                24
  ephemeral-storage:  263174212Ki
  hugepages-1Gi:      0
  hugepages-2Mi:      0
  memory:             52602964Ki
  pods:               110

Allocatable:
  cpu:                24
  ephemeral-storage:  242541353378
  hugepages-1Gi:      0
  hugepages-2Mi:      0
  memory:             52500564Ki
  pods:               110

System Info:
  Machine ID:                 27bb5c95-c4b7-438c-bed1-ed90bac37fb7
  System UUID:                27bb5c95-c4b7-438c-bed1-ed90bac37fb7
  Boot ID:                    352e08fe-ffa3-45f6-a8b2-6173451a9cfd
  Kernel Version:             5.10.16.3-microsoft-standard-WSL2
  OS Image:                   Docker Desktop
  Operating System:           linux
  Architecture:               amd64
  Container Runtime Version:  docker://20.10.14
  Kubelet Version:            v1.24.0
  Kube-Proxy Version:         v1.24.0

Non-terminated Pods:          (12 in total)
  Namespace                   Name                                          CPU Requests  CPU Limits  Memory Requests  Memory Limits  Age
  ---------                   ----                                          ------------  ----------  ---------------  -------------  ---
  default                     kubernetes-bootcamp-d9b4bdd78-s89xj           0 (0%)        0 (0%)      0 (0%)           0 (0%)         82m
  kube-system                 coredns-6d4b75cb6d-7lrqq                      100m (0%)     0 (0%)      70Mi (0%)        170Mi (0%)     44h
  kube-system                 coredns-6d4b75cb6d-hwrst                      100m (0%)     0 (0%)      70Mi (0%)        170Mi (0%)     44h
  kube-system                 etcd-docker-desktop                           100m (0%)     0 (0%)      100Mi (0%)       0 (0%)         44h
  kube-system                 kube-apiserver-docker-desktop                 250m (1%)     0 (0%)      0 (0%)           0 (0%)         44h
  kube-system                 kube-controller-manager-docker-desktop        200m (0%)     0 (0%)      0 (0%)           0 (0%)         44h
  kube-system                 kube-proxy-rn8nq                              0 (0%)        0 (0%)      0 (0%)           0 (0%)         44h
  kube-system                 kube-scheduler-docker-desktop                 100m (0%)     0 (0%)      0 (0%)           0 (0%)         44h
  kube-system                 storage-provisioner                           0 (0%)        0 (0%)      0 (0%)           0 (0%)         44h
  kube-system                 vpnkit-controller                             0 (0%)        0 (0%)      0 (0%)           0 (0%)         44h
  kubernetes-dashboard        dashboard-metrics-scraper-65d858c58b-zlbdg    0 (0%)        0 (0%)      0 (0%)           0 (0%)         21h
  kubernetes-dashboard        kubernetes-dashboard-5c6ff5c64d-vjc5r         0 (0%)        0 (0%)      0 (0%)           0 (0%)         21h
Allocated resources:
  (Total limits may be over 100 percent, i.e., overcommitted.)
  Resource           Requests    Limits
  --------           --------    ------
  cpu                850m (3%)   0 (0%)
  memory             240Mi (0%)  340Mi (0%)
  ephemeral-storage  0 (0%)      0 (0%)
  hugepages-1Gi      0 (0%)      0 (0%)
  hugepages-2Mi      0 (0%)      0 (0%)
Events:              <none>






To find out what port was opened externally (by the NodePort option) weâ€™ll run the describe service command:

> kubectl describe services/kubernetes-bootcamp

Name:                     kubernetes-bootcamp

Namespace:                default

Labels:                   app=kubernetes-bootcamp

Annotations:              <none>

Selector:                 app=kubernetes-bootcamp

Type:                     NodePort

IP Family Policy:         SingleStack

IP Families:              IPv4

IP:                       10.108.145.222

IPs:                      10.108.145.222

LoadBalancer Ingress:     localhost

Port:                     <unset>  8080/TCP

TargetPort:               8080/TCP

NodePort:                 <unset>  31703/TCP          this is the node port number 

Endpoints:                10.1.0.73:8080

Session Affinity:         None

External Traffic Policy:  Cluster

Events:                   <none>




Now we can test that the app is exposed outside of the cluster using curl, the IP of the Node and the externally exposed port:


curl 10.1.0.73:31703

curl $(minikube ip):$NODE_PORT




We have now a running Service called kubernetes-bootcamp. Here we see that the Service received a unique cluster-IP, an internal port and an external-IP (the IP of the Node).




kubernetes-bootcamp   NodePort    10.108.145.222   <none>        8080:31703/TCP   58s    < - - - new ! 

curl 10.108.145.222:31703



(base) PS C:\Windows\system32> kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080
Error from server (AlreadyExists): services "kubernetes-bootcamp" already exists




(base) PS C:\Windows\system32> kubectl get pod --all-namespaces
NAMESPACE              NAME                                         READY   STATUS    RESTARTS         AGE
default                kubernetes-bootcamp-d9b4bdd78-s89xj          1/1     Running   0                102m
kube-system            coredns-6d4b75cb6d-7lrqq                     1/1     Running   2 (5h6m ago)     45h
kube-system            coredns-6d4b75cb6d-hwrst                     1/1     Running   2 (5h6m ago)     45h
kube-system            etcd-docker-desktop                          1/1     Running   13 (5h6m ago)    45h
kube-system            kube-apiserver-docker-desktop                1/1     Running   13 (5h6m ago)    45h
kube-system            kube-controller-manager-docker-desktop       1/1     Running   13 (5h6m ago)    45h
kube-system            kube-proxy-rn8nq                             1/1     Running   2 (5h6m ago)     45h
kube-system            kube-scheduler-docker-desktop                1/1     Running   13 (5h6m ago)    45h
kube-system            storage-provisioner                          1/1     Running   4 (5h5m ago)     45h
kube-system            vpnkit-controller                            1/1     Running   51 (3m29s ago)   45h
kubernetes-dashboard   dashboard-metrics-scraper-65d858c58b-zlbdg   1/1     Running   1 (5h6m ago)     21h
kubernetes-dashboard   kubernetes-dashboard-5c6ff5c64d-vjc5r        1/1     Running   2 (5h5m ago)     21h



Kubernetes Bootcamp App Started At: 2022-05-27T17:32:45.008Z | Running On:  kubernetes-bootcamp-d9b4bdd78-s89xj 


Running On: kubernetes-bootcamp-d9b4bdd78-s89xj | Total Requests: 1 | App Uptime: 3020.279 seconds | Log Time: 2022-05-27T18:23:05.288Z





Step 2: Using labels

The Deployment created automatically a label for our Pod. 


(base) PS C:\Windows\system32> kubectl describe pod kubernetes-bootcamp-d9b4bdd78-s89xj
Name:         kubernetes-bootcamp-d9b4bdd78-s89xj
Namespace:    default
Priority:     0
Node:         docker-desktop/192.168.65.4
Start Time:   Fri, 27 May 2022 12:32:34 -0500
Labels:       app=kubernetes-bootcamp
              pod-template-hash=d9b4bdd78
Annotations:  <none>
Status:       Running
IP:           10.1.0.73
IPs:
  IP:           10.1.0.73
Controlled By:  ReplicaSet/kubernetes-bootcamp-d9b4bdd78
Containers:
  kubernetes-bootcamp:
    Container ID:   docker://0ea257e719d2749970bedf250910cd0cbcc289118f04edd992c9d13403aadf18
    Image:          gcr.io/google-samples/kubernetes-bootcamp:v1
    Image ID:       docker-pullable://gcr.io/google-samples/kubernetes-bootcamp@sha256:0d6b8ee63bb57c5f5b6156f446b3bc3b3c143d233037f3a2f00e279c8fcc64af
    Port:           <none>
    Host Port:      <none>
    State:          Running
      Started:      Fri, 27 May 2022 12:32:44 -0500
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-bfbx2 (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  kube-api-access-bfbx2:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:                      <none>






The Deployment created automatically a label for our Pod. With describe deployment command you can see the name of the label:


> kubectl describe deployment

Name:                   kubernetes-bootcamp

Namespace:              default

CreationTimestamp:      Fri, 27 May 2022 12:32:34 -0500

Labels:                 app=kubernetes-bootcamp                  < ---------

Annotations:            deployment.kubernetes.io/revision: 1

Selector:               app=kubernetes-bootcamp

Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable

StrategyType:           RollingUpdate

MinReadySeconds:        0

RollingUpdateStrategy:  25% max unavailable, 25% max surge

Pod Template:
  Labels:  app=kubernetes-bootcamp
  Containers:
   kubernetes-bootcamp:
    Image:        gcr.io/google-samples/kubernetes-bootcamp:v1
    Port:         <none>
    Host Port:    <none>
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>

Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable

OldReplicaSets:  <none>

NewReplicaSet:   kubernetes-bootcamp-d9b4bdd78 (1/1 replicas created)

Events:          <none>




Letâ€™s use this label to query our list of Pods. 

Weâ€™ll use the kubectl get pods command with -l as a parameter, followed by the label values:

kubectl get pods -l app=kubernetes-bootcamp


(base) PS C:\Windows\system32> kubectl get pods -l app=kubernetes-bootcamp
NAME                                  READY   STATUS    RESTARTS   AGE
kubernetes-bootcamp-d9b4bdd78-s89xj   1/1     Running   0          107m


so the pod is labelled as we filtered above...





You can do the same to list the existing services:

> kubectl get services -l app=kubernetes-bootcamp
NAME                  TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
kubernetes-bootcamp   NodePort   10.108.145.222   <none>        8080:31703/TCP   28m



Get the name of the Pod and store it in the POD_NAME environment variable:






This will apply a new label to our Pod (we pinned the application version to the Pod), and we can check it with the describe pod command:



---------------------------------------------------------------------------------------------------------
To apply a new label we use the label command followed by the object type, object name and the new label:
---------------------------------------------------------------------------------------------------------

kubectl label pods $POD_NAME version=v1

kubectl label pods $POD_NAME version=v1



kubectl label pods kubernetes-bootcamp-d9b4bdd78-s89xj version=v1


(base) PS C:\Windows\system32> kubectl label pods kubernetes-bootcamp-d9b4bdd78-s89xj version=v1
pod/kubernetes-bootcamp-d9b4bdd78-s89xj labeled



(base) PS C:\Windows\system32> kubectl get pods
NAME                                  READY   STATUS    RESTARTS   AGE
kubernetes-bootcamp-d9b4bdd78-s89xj   1/1     Running   0          139m



> kubectl describe pods kubernetes-bootcamp-d9b4bdd78-s89xj

Name:         kubernetes-bootcamp-d9b4bdd78-s89xj

Namespace:    default

Priority:     0

Node:         docker-desktop/192.168.65.4

Start Time:   Fri, 27 May 2022 12:32:34 -0500

Labels:       app=kubernetes-bootcamp
              pod-template-hash=d9b4bdd78
              version=v1                      < - - - new !!! 

Annotations:  <none>

Status:       Running

IP:           10.1.0.73

IPs:
  IP:           10.1.0.73

Controlled By:  ReplicaSet/kubernetes-bootcamp-d9b4bdd78

Containers:
  kubernetes-bootcamp:
    Container ID:   docker://0ea257e719d2749970bedf250910cd0cbcc289118f04edd992c9d13403aadf18
    Image:          gcr.io/google-samples/kubernetes-bootcamp:v1
    Image ID:       docker-pullable://gcr.io/google-samples/kubernetes-bootcamp@sha256:0d6b8ee63bb57c5f5b6156f446b3bc3b3c143d233037f3a2f00e279c8fcc64af
    Port:           <none>
    Host Port:      <none>
    State:          Running
      Started:      Fri, 27 May 2022 12:32:44 -0500
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-bfbx2 (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  kube-api-access-bfbx2:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:                      <none>





This will apply a new label to our Pod (we pinned the application version to the Pod), and we can check it with the describe pod command:

(base) PS C:\Windows\system32> kubectl get pods -l version=v1
NAME                                  READY   STATUS    RESTARTS   AGE
kubernetes-bootcamp-d9b4bdd78-s89xj   1/1     Running   0          141m


bottom line:

-l attach label

filter by -l version=v1 


kubectl get pods -l app=kubernetes-bootcamp
kubectl get services -l app=kubernetes-bootcamp
kubectl get pods -l version=v1




To delete Services you can use the delete service command. Labels can be used also here:


(base) PS C:\Windows\system32> kubectl delete service     -l app=kubernetes-bootcamp
service "kubernetes-bootcamp" deleted



(base) PS C:\Windows\system32> kubectl get services
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   45h




This confirms that our Service was removed. To confirm that route is not exposed anymore you can curl the previously exposed IP and port:

curl $(minikube ip):$NODE_PORT

This proves that the app is not reachable anymore from outside of the cluster. You can confirm that the app is still running with a curl inside the pod:



the app is still up, but the service has been deleted!

We see here that the application is up. This is because the Deployment is managing the application. To shut down the application, you would need to delete the Deployment as well.

























With describe deployment command you can see the name of the label:

(base) PS C:\Windows\system32> kubectl describe pod kubernetes-bootcamp-d9b4bdd78-s89xj
Name:         kubernetes-bootcamp-d9b4bdd78-s89xj
Namespace:    default
Priority:     0
Node:         docker-desktop/192.168.65.4
Start Time:   Fri, 27 May 2022 12:32:34 -0500
Labels:       app=kubernetes-bootcamp
              pod-template-hash=d9b4bdd78
Annotations:  <none>
Status:       Running
IP:           10.1.0.73
IPs:
  IP:           10.1.0.73
Controlled By:  ReplicaSet/kubernetes-bootcamp-d9b4bdd78
Containers:
  kubernetes-bootcamp:
    Container ID:   docker://0ea257e719d2749970bedf250910cd0cbcc289118f04edd992c9d13403aadf18
    Image:          gcr.io/google-samples/kubernetes-bootcamp:v1
    Image ID:       docker-pullable://gcr.io/google-samples/kubernetes-bootcamp@sha256:0d6b8ee63bb57c5f5b6156f446b3bc3b3c143d233037f3a2f00e279c8fcc64af
    Port:           <none>
    Host Port:      <none>
    State:          Running
      Started:      Fri, 27 May 2022 12:32:44 -0500
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-bfbx2 (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  kube-api-access-bfbx2:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:                      <none>




